package model.vo;

import java.math.BigDecimal;

import java.sql.SQLException;
import java.sql.Timestamp;

import model.eo.XxhrHmoTrxHdr_EOImpl;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 25 14:32:45 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxhrHmoTrxHdr_EOViewRowImpl extends ViewRowImpl {


    public static final int ENTITY_XXHRHMOTRXHDR_EO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        HmoTrxHdrId,
        BusinessUnitId,
        HmoRequestNo,
        HmoRequestDate,
        HmoMasterHdrId,
        HmoType,
        PersonId,
        MobileNo,
        MaritalStatus,
        ResiAddress,
        HmoCategory,
        HmoOption,
        HmoPlanTotal,
        HmoPlanDeduction,
        HmoAcceptanceFlag,
        CreatedBy,
        CreationDate,
        LastUpdatedBy,
        LastUpdateDate,
        LastUpdateLogin,
        BusinessUnit_Trans,
        Email_Trans,
        EmpName_Trans,
        EmpNumber_Trans,
        Cat_Switcher,
        Option_Switcher,
        DeptName_Trans,
        Check_Trns,
        AcceptanceFlag_Trans,
        HmoHeaderRowStatus,
        Trans_EligibleCost,
        Trans_NairaEquAmount,
        Trans_AxaLbEligibleCost,
        Photo,
        StateOfResidence,
        Hospital,
        Gender,
        Trans_Title,
        Trans_FirstName,
        Trans_LastName,
        AlternateEmail,
        Trans_Entity,
        PhotoClob,
        HmoCopyDepFlag,
        AddiCategory,
        Trans_DateofBirth,
        Trans_EmpCost,
        Trans_PlanCost,
        SoaFlowid,
        ApprovalStatus,
        ErrorMsg,
        PayrollBatchName,
        ApproverComments,
        Trans_EmpAge,
        Trans_PlanName,
        Trans_Job,
        Switch_AddCat,
        CopyDep,
        HmoPlan,
        HmoEmpCost,
        XxhrHmoTrxDtl_EOView,
        HMO_Type_LOV,
        LOV_BupaCategory,
        TRA_Cat_LOV,
        BUPA_Option_LOV,
        TRA_Option_LOV,
        XxhrHmoMasterHdr_ROVO1_,
        xxperEmployee_V_ROVO1,
        Gender_LOV,
        State_ROVO,
        Hospital_ROVO,
        XxhrHmoTrxHdr_ROVO,
        Entity_ROVO,
        XXHR_HMO_OPTIONS_MASTER_HMOTYPe,
        XXHR_HMO_CATEGORY_MASTER,
        AdditonalCat_ROVO,
        AdditionalCategory_ROVO1,
        MaximumEligibleCost_ROVO,
        FetchDepOption_ROVO,
        StateOfResidence_ROVO,
        FetchHospital_ROVO,
        XXHR_HMO_TypeInter,
        AdditionalCategory_Africa_WW,
        AdditionalCategory_Africa_WWE,
        HmoPlanName_ROVO;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int HMOTRXHDRID = AttributesEnum.HmoTrxHdrId.index();
    public static final int BUSINESSUNITID = AttributesEnum.BusinessUnitId.index();
    public static final int HMOREQUESTNO = AttributesEnum.HmoRequestNo.index();
    public static final int HMOREQUESTDATE = AttributesEnum.HmoRequestDate.index();
    public static final int HMOMASTERHDRID = AttributesEnum.HmoMasterHdrId.index();
    public static final int HMOTYPE = AttributesEnum.HmoType.index();
    public static final int PERSONID = AttributesEnum.PersonId.index();
    public static final int MOBILENO = AttributesEnum.MobileNo.index();
    public static final int MARITALSTATUS = AttributesEnum.MaritalStatus.index();
    public static final int RESIADDRESS = AttributesEnum.ResiAddress.index();
    public static final int HMOCATEGORY = AttributesEnum.HmoCategory.index();
    public static final int HMOOPTION = AttributesEnum.HmoOption.index();
    public static final int HMOPLANTOTAL = AttributesEnum.HmoPlanTotal.index();
    public static final int HMOPLANDEDUCTION = AttributesEnum.HmoPlanDeduction.index();
    public static final int HMOACCEPTANCEFLAG = AttributesEnum.HmoAcceptanceFlag.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int LASTUPDATELOGIN = AttributesEnum.LastUpdateLogin.index();
    public static final int BUSINESSUNIT_TRANS = AttributesEnum.BusinessUnit_Trans.index();
    public static final int EMAIL_TRANS = AttributesEnum.Email_Trans.index();
    public static final int EMPNAME_TRANS = AttributesEnum.EmpName_Trans.index();
    public static final int EMPNUMBER_TRANS = AttributesEnum.EmpNumber_Trans.index();
    public static final int CAT_SWITCHER = AttributesEnum.Cat_Switcher.index();
    public static final int OPTION_SWITCHER = AttributesEnum.Option_Switcher.index();
    public static final int DEPTNAME_TRANS = AttributesEnum.DeptName_Trans.index();
    public static final int CHECK_TRNS = AttributesEnum.Check_Trns.index();
    public static final int ACCEPTANCEFLAG_TRANS = AttributesEnum.AcceptanceFlag_Trans.index();
    public static final int HMOHEADERROWSTATUS = AttributesEnum.HmoHeaderRowStatus.index();
    public static final int TRANS_ELIGIBLECOST = AttributesEnum.Trans_EligibleCost.index();
    public static final int TRANS_NAIRAEQUAMOUNT = AttributesEnum.Trans_NairaEquAmount.index();
    public static final int TRANS_AXALBELIGIBLECOST = AttributesEnum.Trans_AxaLbEligibleCost.index();
    public static final int PHOTO = AttributesEnum.Photo.index();
    public static final int STATEOFRESIDENCE = AttributesEnum.StateOfResidence.index();
    public static final int HOSPITAL = AttributesEnum.Hospital.index();
    public static final int GENDER = AttributesEnum.Gender.index();
    public static final int TRANS_TITLE = AttributesEnum.Trans_Title.index();
    public static final int TRANS_FIRSTNAME = AttributesEnum.Trans_FirstName.index();
    public static final int TRANS_LASTNAME = AttributesEnum.Trans_LastName.index();
    public static final int ALTERNATEEMAIL = AttributesEnum.AlternateEmail.index();
    public static final int TRANS_ENTITY = AttributesEnum.Trans_Entity.index();
    public static final int PHOTOCLOB = AttributesEnum.PhotoClob.index();
    public static final int HMOCOPYDEPFLAG = AttributesEnum.HmoCopyDepFlag.index();
    public static final int ADDICATEGORY = AttributesEnum.AddiCategory.index();
    public static final int TRANS_DATEOFBIRTH = AttributesEnum.Trans_DateofBirth.index();
    public static final int TRANS_EMPCOST = AttributesEnum.Trans_EmpCost.index();
    public static final int TRANS_PLANCOST = AttributesEnum.Trans_PlanCost.index();
    public static final int SOAFLOWID = AttributesEnum.SoaFlowid.index();
    public static final int APPROVALSTATUS = AttributesEnum.ApprovalStatus.index();
    public static final int ERRORMSG = AttributesEnum.ErrorMsg.index();
    public static final int PAYROLLBATCHNAME = AttributesEnum.PayrollBatchName.index();
    public static final int APPROVERCOMMENTS = AttributesEnum.ApproverComments.index();
    public static final int TRANS_EMPAGE = AttributesEnum.Trans_EmpAge.index();
    public static final int TRANS_PLANNAME = AttributesEnum.Trans_PlanName.index();
    public static final int TRANS_JOB = AttributesEnum.Trans_Job.index();
    public static final int SWITCH_ADDCAT = AttributesEnum.Switch_AddCat.index();
    public static final int COPYDEP = AttributesEnum.CopyDep.index();
    public static final int HMOPLAN = AttributesEnum.HmoPlan.index();
    public static final int HMOEMPCOST = AttributesEnum.HmoEmpCost.index();
    public static final int XXHRHMOTRXDTL_EOVIEW = AttributesEnum.XxhrHmoTrxDtl_EOView.index();
    public static final int HMO_TYPE_LOV = AttributesEnum.HMO_Type_LOV.index();
    public static final int LOV_BUPACATEGORY = AttributesEnum.LOV_BupaCategory.index();
    public static final int TRA_CAT_LOV = AttributesEnum.TRA_Cat_LOV.index();
    public static final int BUPA_OPTION_LOV = AttributesEnum.BUPA_Option_LOV.index();
    public static final int TRA_OPTION_LOV = AttributesEnum.TRA_Option_LOV.index();
    public static final int XXHRHMOMASTERHDR_ROVO1_ = AttributesEnum.XxhrHmoMasterHdr_ROVO1_.index();
    public static final int XXPEREMPLOYEE_V_ROVO1 = AttributesEnum.xxperEmployee_V_ROVO1.index();
    public static final int GENDER_LOV = AttributesEnum.Gender_LOV.index();
    public static final int STATE_ROVO = AttributesEnum.State_ROVO.index();
    public static final int HOSPITAL_ROVO = AttributesEnum.Hospital_ROVO.index();
    public static final int XXHRHMOTRXHDR_ROVO = AttributesEnum.XxhrHmoTrxHdr_ROVO.index();
    public static final int ENTITY_ROVO = AttributesEnum.Entity_ROVO.index();
    public static final int XXHR_HMO_OPTIONS_MASTER_HMOTYPE = AttributesEnum.XXHR_HMO_OPTIONS_MASTER_HMOTYPe.index();
    public static final int XXHR_HMO_CATEGORY_MASTER = AttributesEnum.XXHR_HMO_CATEGORY_MASTER.index();
    public static final int ADDITONALCAT_ROVO = AttributesEnum.AdditonalCat_ROVO.index();
    public static final int ADDITIONALCATEGORY_ROVO1 = AttributesEnum.AdditionalCategory_ROVO1.index();
    public static final int MAXIMUMELIGIBLECOST_ROVO = AttributesEnum.MaximumEligibleCost_ROVO.index();
    public static final int FETCHDEPOPTION_ROVO = AttributesEnum.FetchDepOption_ROVO.index();
    public static final int STATEOFRESIDENCE_ROVO = AttributesEnum.StateOfResidence_ROVO.index();
    public static final int FETCHHOSPITAL_ROVO = AttributesEnum.FetchHospital_ROVO.index();
    public static final int XXHR_HMO_TYPEINTER = AttributesEnum.XXHR_HMO_TypeInter.index();
    public static final int ADDITIONALCATEGORY_AFRICA_WW = AttributesEnum.AdditionalCategory_Africa_WW.index();
    public static final int ADDITIONALCATEGORY_AFRICA_WWE = AttributesEnum.AdditionalCategory_Africa_WWE.index();
    public static final int HMOPLANNAME_ROVO = AttributesEnum.HmoPlanName_ROVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxhrHmoTrxHdr_EOViewRowImpl() {
    }

    /**
     * Gets XxhrHmoTrxHdr_EO entity object.
     * @return the XxhrHmoTrxHdr_EO
     */
    public XxhrHmoTrxHdr_EOImpl getXxhrHmoTrxHdr_EO() {
        return (XxhrHmoTrxHdr_EOImpl) getEntity(ENTITY_XXHRHMOTRXHDR_EO);
    }

    /**
     * Gets the attribute value for HMO_TRX_HDR_ID using the alias name HmoTrxHdrId.
     * @return the HMO_TRX_HDR_ID
     */
    public Number getHmoTrxHdrId() {
        return (Number) getAttributeInternal(HMOTRXHDRID);
    }

    /**
     * Sets <code>value</code> as attribute value for HMO_TRX_HDR_ID using the alias name HmoTrxHdrId.
     * @param value value to set the HMO_TRX_HDR_ID
     */
    public void setHmoTrxHdrId(Number value) {
        setAttributeInternal(HMOTRXHDRID, value);
    }

    /**
     * Gets the attribute value for BUSINESS_UNIT_ID using the alias name BusinessUnitId.
     * @return the BUSINESS_UNIT_ID
     */
    public Number getBusinessUnitId() throws SQLException {
        System.err.println("Business unit---getBusinessUnitId--");
        oracle.jbo.domain.Number type = null;
        oracle.jbo.domain.Number g = new oracle.jbo.domain.Number();
        Object name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = rw.getAttribute("BusinessUnitId");
                g = new oracle.jbo.domain.Number(name == null ? "0" : name.toString());
            }

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                System.err.println("Business unit---inside if--");
            //                name = orgRows[0].getAttribute("BusinessUnitId");
            //                g = new oracle.jbo.domain.Number(name == null ? "0" : name.toString());
            //            }
            System.err.println("Business unit-----" + name);
            return g;
        } else {
            //        Number type;
            //        Number name = null;
            //        if (getPersonId() != null) {
            //            type = getPersonId();
            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", type);
            //            if (orgRows.length > 0) {
            //                name = (Number) orgRows[0].getAttribute("BusinessUnitId");
            //            }
            //            return name;
            //        } else {
            return (Number) getAttributeInternal(BUSINESSUNITID);
        }
    }

    /**
     * Sets <code>value</code> as attribute value for BUSINESS_UNIT_ID using the alias name BusinessUnitId.
     * @param value value to set the BUSINESS_UNIT_ID
     */
    public void setBusinessUnitId(Number value) {
        setAttributeInternal(BUSINESSUNITID, value);
    }

    /**
     * Gets the attribute value for HMO_REQUEST_NO using the alias name HmoRequestNo.
     * @return the HMO_REQUEST_NO
     */
    public String getHmoRequestNo() {
        return (String) getAttributeInternal(HMOREQUESTNO);
    }

    /**
     * Sets <code>value</code> as attribute value for HMO_REQUEST_NO using the alias name HmoRequestNo.
     * @param value value to set the HMO_REQUEST_NO
     */
    public void setHmoRequestNo(String value) {
        setAttributeInternal(HMOREQUESTNO, value);
    }

    /**
     * Gets the attribute value for HMO_REQUEST_DATE using the alias name HmoRequestDate.
     * @return the HMO_REQUEST_DATE
     */
    public Timestamp getHmoRequestDate() {
        return (Timestamp) getAttributeInternal(HMOREQUESTDATE);
    }


    /**
     * Gets the attribute value for HMO_MASTER_HDR_ID using the alias name HmoMasterHdrId.
     * @return the HMO_MASTER_HDR_ID
     */
    public Number getHmoMasterHdrId() {
        return (Number) getAttributeInternal(HMOMASTERHDRID);
    }

    /**
     * Sets <code>value</code> as attribute value for HMO_MASTER_HDR_ID using the alias name HmoMasterHdrId.
     * @param value value to set the HMO_MASTER_HDR_ID
     */
    public void setHmoMasterHdrId(Number value) {
        setAttributeInternal(HMOMASTERHDRID, value);
    }

    /**
     * Gets the attribute value for HMO_TYPE using the alias name HmoType.
     * @return the HMO_TYPE
     */
    public String getHmoType() {
        return (String) getAttributeInternal(HMOTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for HMO_TYPE using the alias name HmoType.
     * @param value value to set the HMO_TYPE
     */
    public void setHmoType(String value) {
        setAttributeInternal(HMOTYPE, value);
    }

    /**
     * Gets the attribute value for PERSON_ID using the alias name PersonId.
     * @return the PERSON_ID
     */
    public Number getPersonId() {
        return (Number) getAttributeInternal(PERSONID);
    }


    /**
     * Sets <code>value</code> as attribute value for PERSON_ID using the alias name PersonId.
     * @param value value to set the PERSON_ID
     */
    public void setPersonId(Number value) {
        setAttributeInternal(PERSONID, value);
    }

    /**
     * Gets the attribute value for MOBILE_NO using the alias name MobileNo.
     * @return the MOBILE_NO
     */
    public String getMobileNo() {
        return (String) getAttributeInternal(MOBILENO);
    }

    /**
     * Sets <code>value</code> as attribute value for MOBILE_NO using the alias name MobileNo.
     * @param value value to set the MOBILE_NO
     */
    public void setMobileNo(String value) {
        setAttributeInternal(MOBILENO, value);
    }

    /**
     * Gets the attribute value for MARITAL_STATUS using the alias name MaritalStatus.
     * @return the MARITAL_STATUS
     */
    public String getMaritalStatus() {
        return (String) getAttributeInternal(MARITALSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for MARITAL_STATUS using the alias name MaritalStatus.
     * @param value value to set the MARITAL_STATUS
     */
    public void setMaritalStatus(String value) {
        setAttributeInternal(MARITALSTATUS, value);
    }

    /**
     * Gets the attribute value for RESI_ADDRESS using the alias name ResiAddress.
     * @return the RESI_ADDRESS
     */
    public String getResiAddress() {
        return (String) getAttributeInternal(RESIADDRESS);
    }

    /**
     * Sets <code>value</code> as attribute value for RESI_ADDRESS using the alias name ResiAddress.
     * @param value value to set the RESI_ADDRESS
     */
    public void setResiAddress(String value) {
        setAttributeInternal(RESIADDRESS, value);
    }

    /**
     * Gets the attribute value for HMO_CATEGORY using the alias name HmoCategory.
     * @return the HMO_CATEGORY
     */
    public String getHmoCategory() {
        return (String) getAttributeInternal(HMOCATEGORY);
    }

    /**
     * Sets <code>value</code> as attribute value for HMO_CATEGORY using the alias name HmoCategory.
     * @param value value to set the HMO_CATEGORY
     */
    public void setHmoCategory(String value) {
        setAttributeInternal(HMOCATEGORY, value);
    }

    /**
     * Gets the attribute value for HMO_OPTION using the alias name HmoOption.
     * @return the HMO_OPTION
     */
    public String getHmoOption() {
        return (String) getAttributeInternal(HMOOPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for HMO_OPTION using the alias name HmoOption.
     * @param value value to set the HMO_OPTION
     */
    public void setHmoOption(String value) {
        setAttributeInternal(HMOOPTION, value);
    }

    /**
     * Gets the attribute value for HMO_PLAN_TOTAL using the alias name HmoPlanTotal.
     * @return the HMO_PLAN_TOTAL
     */
    public BigDecimal getHmoPlanTotal() {
        BigDecimal totVal = new BigDecimal(0);
        //  BigDecimal sumDeptCost = new BigDecimal(0);

        String hmoCateg = (String) (this.getHmoCategory() == null ? "" : (this.getHmoCategory().toString()));
        String hmoOptions = (String) (this.getHmoOption() == null ? "" : (this.getHmoOption().toString()));
        String hmoType = (String) (this.getHmoType() == null ? "" : (this.getHmoType().toString()));
        String statusValue = (String) (this.getApprovalStatus() == null ? "" : (this.getApprovalStatus().toString()));
        RowIterator rs = getXxhrHmoTrxDtl_EOView();
        int rowCount = getXxhrHmoTrxDtl_EOView().getRowCount();
        int rowCountt = getXxhrHmoTrxDtl_EOView().getRowCount();
        System.out.println("Total Plan amount------");
        System.out.println("getHmoTrxHdrId() ----- + " + getHmoTrxHdrId());
        System.out.println("rowCount() ----- + " + rowCount);
        BigDecimal totEmpCost = this.getTrans_EmpCost() == null ? new BigDecimal(0) : this.getTrans_EmpCost();

        System.out.println("- totEmpCosttotEmpCost--- " + totEmpCost);
        if ("DRAFT".equals(statusValue)) {
//            if ("Traditional Dependent Categorization".equals(hmoCateg) && "LEADWAY HEALTH PREMIUM".equals(hmoType)) {
//                rowCountt = rowCountt + 1;
//                System.err.println("rowCount-test-" + rowCountt);
//                //System.err.println("==" + totEmpCost.multiply(new BigDecimal(rowCountt)));
//               // totVal = totEmpCost.multiply(new BigDecimal(rowCountt));
//               while (rs.hasNext()) {
//                   Row r = rs.next();
//                   System.out.println("Inside ESLEEEE Emp only----- ");
//                   totVal =
//                       (r.getAttribute("DependentCost") == null ? new BigDecimal(0) :
//                        (BigDecimal) r.getAttribute("DependentCost"));
//
//               }
//                return totVal;
//            } else 
            if (!"Traditional Dependent Categorization".equals(hmoCateg)) {
                if (rowCount != 0) {
                    totVal = totEmpCost.add(totVal);
                    System.out.println("totVal not equl to zero  --- " + totVal);
                }
                while (rs.hasNext()) {
                    System.out.println("Inside While looop--------");
                    Row r = rs.next();
                    if (rowCount == 0) {
                        totVal =
                            totEmpCost.add(r.getAttribute("DependentCost") == null ? new BigDecimal(0) :
                                           (BigDecimal) r.getAttribute("DependentCost"));
                        System.out.println("totVal inside if  ------ " + totVal);
                    } else {
                        System.out.println("Inside else count loop");
                        totVal =
                            totVal.add(r.getAttribute("DependentCost") == null ? new BigDecimal(0) :
                                       (BigDecimal) r.getAttribute("DependentCost"));
                        System.out.println("totVal inside else  ------ " + totVal);
                    }

                    // totVal= totVal.add(totPlanAmt);

                }
                if (hmoOptions.equals("Employee Only") || "EMP_ONLY".equals(hmoOptions)) {
                    totVal = totEmpCost;
                }


                System.out.println("totVal inside if loopopop ------ " + totVal);
                return totVal;
            } else {
                while (rs.hasNext()) {
                    Row r = rs.next();
                    System.out.println("Inside ESLEEEE Emp only----- ");
                    totVal =
                        (r.getAttribute("DependentCost") == null ? new BigDecimal(0) :
                         (BigDecimal) r.getAttribute("DependentCost"));
                    System.out.println("totalValue is ========= " + totVal);

                }
                if ("AXAMANSARD HEALTH".equals(hmoType) || "LEADWAY HEALTH STANDARD".equals(hmoType) || "RELIANCE HEALTH".equals(hmoType)) {
                    if ("Traditional Dependent Categorization".equals(hmoCateg)) {
                        if (hmoOptions.equals("Employee Only") || "EMP_ONLY".equals(hmoOptions)) {
                            System.out.println("Inside IF Emp only----- ");
                            System.out.println("Emp only----- " + totEmpCost);
                            totVal = totEmpCost;
                        }
                    }

                }

                System.out.println("totVal else------ " + totVal);
                return totVal;
            }
        } else {
            return (BigDecimal) getAttributeInternal(HMOPLANTOTAL);
        }


    }

    /**
     * Sets <code>value</code> as attribute value for HMO_PLAN_TOTAL using the alias name HmoPlanTotal.
     * @param value value to set the HMO_PLAN_TOTAL
     */
    public void setHmoPlanTotal(BigDecimal value) {
        setAttributeInternal(HMOPLANTOTAL, value);
    }

    /**
     * Gets the attribute value for HMO_PLAN_DEDUCTION using the alias name HmoPlanDeduction.
     * @return the HMO_PLAN_DEDUCTION
     */
    public BigDecimal getHmoPlanDeduction() {


        BigDecimal totalPlanAmount =
            (BigDecimal) (this.getHmoPlanTotal() == null ? new BigDecimal(0) : (BigDecimal) this.getHmoPlanTotal());
        BigDecimal eligibleCost =
            (BigDecimal) (this.getTrans_EligibleCost() == null ? new BigDecimal(0) :
                          (BigDecimal) this.getTrans_EligibleCost());

        BigDecimal axaEligibleCost =
            (BigDecimal) (this.getTrans_AxaLbEligibleCost() == null ? new BigDecimal(0) :
                          (BigDecimal) this.getTrans_AxaLbEligibleCost());

        String hmoCategory = (String) (this.getHmoCategory() == null ? "" : (this.getHmoCategory().toString()));
        String hmoOptions = (String) (this.getHmoOption() == null ? "" : (this.getHmoOption().toString()));
        String hmoType = (String) (this.getHmoType() == null ? "" : (this.getHmoType().toString()));
        String statusValue = (String) (this.getApprovalStatus() == null ? "" : (this.getApprovalStatus().toString()));
        System.out.println("getHmoType()---------- " + hmoType);
        System.out.println("getHmoCategory()---------- " + hmoCategory);
        System.out.println("getApprovalStatus()---------- " + statusValue);
        double a = totalPlanAmount.doubleValue();
        System.out.println(a + "----------------------a");
        double b = eligibleCost.doubleValue();
        System.out.println(b + "----------------------b");
        double c = axaEligibleCost.doubleValue();
        if ("DRAFT".equals(statusValue)) {
            if (("BUPA".equals(hmoType) || "CIGNA".equals(hmoType)) ||
                ("LEADWAY HEALTH PREMIUM".equals(hmoType) &&
                 "Traditional Dependent Categorization".equals(hmoCategory)) ||
                ("LEADWAY HEALTH STANDARD".equals(hmoType) &&
                 "Traditional Dependent Categorization".equals(hmoCategory)) ||
                ("Age-based Categorization".equals(hmoCategory) || "Plus Africa".equals(hmoCategory) ||
                 "Global Elite".equals(hmoCategory) && "Employee + Other Dependant".equals(hmoOptions))) {
                System.out.println(" inside first if condiiton-------------");
                if (a >= b) {
                    System.out.println("Greater inside if looooop");
                    return (BigDecimal) (totalPlanAmount.subtract(eligibleCost));

                } else {
                    System.out.println("Less inside else loooooooooop");
                    return new BigDecimal(0);
                }
            }
            else if(("LEADWAY HEALTH STANDARD".equals(hmoType) &&
                "Traditional Dependent Categorization".equals(hmoCategory)) ||  ("AXAMANSARD HEALTH".equals(hmoType) &&
                "Traditional Dependent Categorization".equals(hmoCategory) )  ){
                    System.err.println("AXA and TRAD");
                    return new BigDecimal(0);
                }
            
            else {
                if (a >= c) {
                    System.out.println("Else greater----  ");
                    return (BigDecimal) (totalPlanAmount.subtract(axaEligibleCost));

                } else {
                    System.out.println("Else lesss- ");
                    return new BigDecimal(0);
                }
            }
        } else {
            return (BigDecimal) getAttributeInternal(HMOPLANDEDUCTION);
        }


    }

    /**
     * Sets <code>value</code> as attribute value for HMO_PLAN_DEDUCTION using the alias name HmoPlanDeduction.
     * @param value value to set the HMO_PLAN_DEDUCTION
     */
    public void setHmoPlanDeduction(BigDecimal value) {
        setAttributeInternal(HMOPLANDEDUCTION, value);
    }

    /**
     * Gets the attribute value for HMO_ACCEPTANCE_FLAG using the alias name HmoAcceptanceFlag.
     * @return the HMO_ACCEPTANCE_FLAG
     */
    public String getHmoAcceptanceFlag() {
        return (String) getAttributeInternal(HMOACCEPTANCEFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for HMO_ACCEPTANCE_FLAG using the alias name HmoAcceptanceFlag.
     * @param value value to set the HMO_ACCEPTANCE_FLAG
     */
    public void setHmoAcceptanceFlag(String value) {
        setAttributeInternal(HMOACCEPTANCEFLAG, value);
    }

    /**
     * Gets the attribute value for CREATED_BY using the alias name CreatedBy.
     * @return the CREATED_BY
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATED_BY using the alias name CreatedBy.
     * @param value value to set the CREATED_BY
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CREATION_DATE using the alias name CreationDate.
     * @return the CREATION_DATE
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }


    /**
     * Gets the attribute value for LAST_UPDATED_BY using the alias name LastUpdatedBy.
     * @return the LAST_UPDATED_BY
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Gets the attribute value for LAST_UPDATE_DATE using the alias name LastUpdateDate.
     * @return the LAST_UPDATE_DATE
     */
    public Timestamp getLastUpdateDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Gets the attribute value for LAST_UPDATE_LOGIN using the alias name LastUpdateLogin.
     * @return the LAST_UPDATE_LOGIN
     */
    public String getLastUpdateLogin() {
        return (String) getAttributeInternal(LASTUPDATELOGIN);
    }

    /**
     * Gets the attribute value for BUSINESS_UNIT_TRANS using the alias name BusinessUnit_Trans.
     * @return the BUSINESS_UNIT_TRANS
     */
    public String getBusinessUnit_Trans() {
        return (String) getAttributeInternal(BUSINESSUNIT_TRANS);
    }

    /**
     * Sets <code>value</code> as attribute value for BUSINESS_UNIT_TRANS using the alias name BusinessUnit_Trans.
     * @param value value to set the BUSINESS_UNIT_TRANS
     */
    public void setBusinessUnit_Trans(String value) {
        setAttributeInternal(BUSINESSUNIT_TRANS, value);
    }

    /**
     * Gets the attribute value for EMAIL_TRANS using the alias name Email_Trans.
     * @return the EMAIL_TRANS
     */
    public String getEmail_Trans() {
        oracle.jbo.domain.Number type = null;
        String name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name =
            //                    orgRows[0].getAttribute("EmailAddress") == null ? "" :
            //                    orgRows[0].getAttribute("EmailAddress").toString();
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = rw.getAttribute("EmailAddress") != null ? rw.getAttribute("EmailAddress").toString() : "";
            }
            return name;
        } else {
            //        Number type;
            //        String name = null;
            //        if (getPersonId() != null) {
            //            type = getPersonId();
            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", type);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("EmailAddress").toString();
            //            }
            //            return name;
            //        } else {
            return (String) getAttributeInternal(EMAIL_TRANS);
        }
        // return (String) getAttributeInternal(EMAIL_TRANS);
    }

    /**
     * Sets <code>value</code> as attribute value for EMAIL_TRANS using the alias name Email_Trans.
     * @param value value to set the EMAIL_TRANS
     */
    public void setEmail_Trans(String value) {
        setAttributeInternal(EMAIL_TRANS, value);
    }

    /**
     * Gets the attribute value for EMP_NAME_TRANS using the alias name EmpName_Trans.
     * @return the EMP_NAME_TRANS
     */
    public String getEmpName_Trans() {

        oracle.jbo.domain.Number type = null;
        String name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("DisplayName").toString();
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = rw.getAttribute("DisplayName") != null ? rw.getAttribute("DisplayName").toString() : "";
            }

            return name;
        } else {


            //        System.out.println("Inside Get Emp Name Method");
            //        Number type;
            //        String name = null;
            //        if (getPersonId() != null) {
            //            type = getPersonId();
            //            System.out.println("Type ---------" + type);
            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", type);
            //            System.out.println("orgRows.length-----------" + orgRows.length);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("DisplayName").toString();
            //            }
            //            System.out.println("name_-----------" + name);
            //            return name;
            //        } else {

            return (String) getAttributeInternal(EMPNAME_TRANS);
        }
        // return (String) getAttributeInternal(EMPNAME_TRANS);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_NAME_TRANS using the alias name EmpName_Trans.
     * @param value value to set the EMP_NAME_TRANS
     */
    public void setEmpName_Trans(String value) {
        setAttributeInternal(EMPNAME_TRANS, value);
    }

    /**
     * Gets the attribute value for EMP_NUMBER_TRANS using the alias name EmpNumber_Trans.
     * @return the EMP_NUMBER_TRANS
     */
    public String getEmpNumber_Trans() {
        oracle.jbo.domain.Number type = null;
        String name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name =
            //                    orgRows[0].getAttribute("PersonNumber") == null ? "" :
            //                    orgRows[0].getAttribute("PersonNumber").toString();
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = rw.getAttribute("PersonNumber") != null ? rw.getAttribute("PersonNumber").toString() : "";
            }
            return name;
        } else {
            //        Number type;
            //        String name = null;
            //        if (getPersonId() != null) {
            //            type = getPersonId();
            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", type);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("PersonNumber").toString();
            //            }
            //            return name;
            //        } else {

            return (String) getAttributeInternal(EMPNUMBER_TRANS);
        }
        //return (String) getAttributeInternal(EMPNUMBER_TRANS);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_NUMBER_TRANS using the alias name EmpNumber_Trans.
     * @param value value to set the EMP_NUMBER_TRANS
     */
    public void setEmpNumber_Trans(String value) {
        setAttributeInternal(EMPNUMBER_TRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Cat_Switcher.
     * @return the Cat_Switcher
     */
    public String getCat_Switcher() {
        return (String) getAttributeInternal(CAT_SWITCHER);
    }

    /**
     * Gets the attribute value for the calculated attribute Traditional_Switcher.
     * @return the Traditional_Switcher
     */
    public String getOption_Switcher() {
        return (String) getAttributeInternal(OPTION_SWITCHER);
    }

    /**
     * Gets the attribute value for DEPT_NAME_TRANS using the alias name DeptName_Trans.
     * @return the DEPT_NAME_TRANS
     */
    public String getDeptName_Trans() {
        oracle.jbo.domain.Number type = null;
        String name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("DepartmentName").toString();
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = rw.getAttribute("DepartmentName") != null ? rw.getAttribute("DepartmentName").toString() : "";
            }
            return name;
        } else {

            return (String) getAttributeInternal(DEPTNAME_TRANS);
        }

    }

    /**
     * Sets <code>value</code> as attribute value for DEPT_NAME_TRANS using the alias name DeptName_Trans.
     * @param value value to set the DEPT_NAME_TRANS
     */
    public void setDeptName_Trans(String value) {
        setAttributeInternal(DEPTNAME_TRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Check_Trns.
     * @return the Check_Trns
     */
    public String getCheck_Trns() {
        //        oracle.jbo.domain.Number type = null;
        //           String name = null;
        //           if (getHmoMasterHdrId() != null) {
        //               type = getHmoMasterHdrId();
        //
        //
        //               Row[] orgRows;
        //               orgRows = getXxhrHmoTrxHdr_EOView().getFilteredRows("HmoMasterHdrId", type);
        //               if (orgRows.length > 0) {
        ////                   name = orgRows[0].getAttribute("HmoAcceptanceFlag").toString();
        //                   name="Y";
        //
        //               }
        //               return name;
        //           } else {
        //
        //               return (String) getAttributeInternal(CHECK_TRNS);
        //           }

        return (String) getAttributeInternal(CHECK_TRNS);

    }

    /**
     * Gets the attribute value for the calculated attribute AcceptanceFlag_Trans.
     * @return the AcceptanceFlag_Trans
     */
    public Boolean getAcceptanceFlag_Trans() {
        Boolean flag = false;
        if (this.getHmoAcceptanceFlag() != null && this.getHmoAcceptanceFlag().equalsIgnoreCase("Y")) {
            flag = true;
        } else {
            flag = false;
        }
        return (Boolean) flag;

        //   return (Boolean) getAttributeInternal(ACCEPTANCEFLAG_TRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AcceptanceFlag_Trans.
     * @param value value to set the  AcceptanceFlag_Trans
     */
    public void setAcceptanceFlag_Trans(Boolean value) {
        System.out.println("Value::: " + value);
        if (value == true) {
            setAttributeInternal(HMOACCEPTANCEFLAG, "Y");
        } else {
            setAttributeInternal(HMOACCEPTANCEFLAG, "N");
        }
        //  setAttributeInternal(ACCEPTANCEFLAG_TRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HmoHeaderRowStatus.
     * @return the HmoHeaderRowStatus
     */
    public Integer getHmoHeaderRowStatus() {
        byte entityState = this.getEntity(0).getEntityState();
        return new Integer(entityState);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_EligibleCost.
     * @return the Trans_EligibleCost
     */
    public BigDecimal getTrans_EligibleCost() {
        Number mstrId = null;
        BigDecimal cost = new BigDecimal(0);
        // Number axaCost = null;

        System.out.println("Inside trans eliglible cost ");

        if (getHmoMasterHdrId() != null) {
            mstrId = (Number) getHmoMasterHdrId();
            //  BigDecimal mstrId = this.getHmoMasterHdrId();
            String categoryIdd = this.getHmoCategory();
            String depOption = this.getHmoOption();
            String option = this.getHmoType();

            ViewRowSetImpl vo = (ViewRowSetImpl) getMaximumEligibleCost_ROVO();
            ViewObject vo1 = vo.getViewObject();
            System.out.println("Category vo1.getEstimatedRowCount() ------------" + vo1.getEstimatedRowCount());
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("HmoCategory", categoryIdd);
            vc1.addRow(vcr);
            vcr.setAttribute("HmoOptions", option);
            vc1.addRow(vcr);
            vcr.setAttribute("DependentOptions", depOption);
            vc1.addRow(vcr);
            vcr.setAttribute("HmoMasterHdrId", mstrId);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            System.out.println("Count---------- " + vo1.getEstimatedRowCount());

            Row rw = vo1.first();
            if (rw != null) {
                System.out.println("Inside if loop --");
                cost = (BigDecimal) rw.getAttribute("MaxEligibiltyCost");
                //   OfferNumber = (String) rw.getAttribute("OfferNumber");
                System.out.println("Inside if loop cost--" + cost);
            }
            //            ViewObjectImpl vo = (ViewObjectImpl) this.getMaximumEligibleCost_ROVO();
            //            ViewCriteria vc = vo.createViewCriteria();
            //            ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
            //            vcRow.setAttribute("HmoCategoryId", categoryIdd);
            //            vc.addRow(vcRow);
            //            vo.applyViewCriteria(vc);
            //            vo.executeQuery();
            //            System.out.println("Vo query ------ " + vo.getQuery());
            //            if (vo.getEstimatedRowCount() > 0) {
            //                System.out.println("Vlaue ------ " +  vo.first().getAttribute("MaxEligibiltyCost"));
            //            }
            //            //id = (Number)getHmoMasterHdrId();
            //            ViewObject deptVo = (ViewObject) this.getMaximumEligibleCost_ROVO();
            //            //Filter data using getFilteredRows method
            //            Row filteredRows[] = deptVo.getFilteredRows("HmoCategoryId", categoryIdd);
            //
            //            for (Row r : filteredRows) {
            //            System.out.println("Filtered Row- " + r.getAttribute("MaxEligibiltyCost") + "n");
            //            }

            //            Row[] orgRows;
            //            System.out.println("Count---------- " + getMaximumEligibleCost_ROVO().getEstimatedRowCount());
            //            System.out.println("Category id ------------" + categoryIdd);
            //            orgRows = getMaximumEligibleCost_ROVO().getFilteredRows("HmoCategoryId", "100042");
            //            System.out.println("Length after fileter -------" + orgRows.length);
            //            if (orgRows.length > 0) {
            //                System.out.println("Inside if loop --");
            //                //  axaCost = (Number)orgRows[0].getAttribute("AxaLbEligibleCost");
            //                cost = (BigDecimal) orgRows[0].getAttribute("MaxEligibiltyCost");
            //                // System.out.println("Cost-------" + cost);
            //            }
            System.out.println("Cost-------" + cost);
            return cost;
            //               if(getHmoType().equals("BUPA")){
            //               return cost;}
            //               else{
            //                   return axaCost;
            //                   }
        } else {
            return (BigDecimal) getAttributeInternal(TRANS_ELIGIBLECOST);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_EligibleCost.
     * @param value value to set the  Trans_EligibleCost
     */
    public void setTrans_EligibleCost(BigDecimal value) {
        setAttributeInternal(TRANS_ELIGIBLECOST, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_NairaEquAmount.
     * @return the Trans_NairaEquAmount
     */
    public BigDecimal getTrans_NairaEquAmount() {

        BigDecimal nairaEquAmt =
            (BigDecimal) (this.getHmoPlanDeduction() == null ? new BigDecimal(0) :
                          (BigDecimal) this.getHmoPlanDeduction());
        return (BigDecimal) (nairaEquAmt.multiply(new BigDecimal(570)));
        //return (Number) getAttributeInternal(TRANS_NAIRAEQUAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_NairaEquAmount.
     * @param value value to set the  Trans_NairaEquAmount
     */
    public void setTrans_NairaEquAmount(BigDecimal value) {
        setAttributeInternal(TRANS_NAIRAEQUAMOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_AxaLbEligibleCost.
     * @return the Trans_AxaLbEligibleCost
     */
    public BigDecimal getTrans_AxaLbEligibleCost() {
        Number id = null;
        BigDecimal cost = null;
        if (getHmoMasterHdrId() != null) {
            id = (Number) getHmoMasterHdrId();
            //            Row[] orgRows;
            //            orgRows = getXxhrHmoMasterHdr_ROVO1_().getFilteredRows("HmoMasterHdrId", id);
            //            if (orgRows.length > 0) {
            //
            //                cost = (BigDecimal) orgRows[0].getAttribute("AxaLbEligibleCost");
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getXxhrHmoMasterHdr_ROVO1_();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("HmoMasterHdrId", id);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            System.out.println("getTrans_AxaLbEligibleCost  ----" + vo1.getEstimatedRowCount());
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                cost = (BigDecimal) rw.getAttribute("AxaLbEligibleCost");
            }

            return cost;
        } else {
            return (BigDecimal) getAttributeInternal(TRANS_AXALBELIGIBLECOST);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_AxaLbEligibleCost.
     * @param value value to set the  Trans_AxaLbEligibleCost
     */
    public void setTrans_AxaLbEligibleCost(BigDecimal value) {
        setAttributeInternal(TRANS_AXALBELIGIBLECOST, value);
    }

    /**
     * Gets the attribute value for PHOTO using the alias name Photo.
     * @return the PHOTO
     */
    public BlobDomain getPhoto() {
        return (BlobDomain) getAttributeInternal(PHOTO);
    }

    /**
     * Sets <code>value</code> as attribute value for PHOTO using the alias name Photo.
     * @param value value to set the PHOTO
     */
    public void setPhoto(BlobDomain value) {
        setAttributeInternal(PHOTO, value);
    }

    /**
     * Gets the attribute value for STATE_OF_RESIDENCE using the alias name StateOfResidence.
     * @return the STATE_OF_RESIDENCE
     */
    public String getStateOfResidence() {
        return (String) getAttributeInternal(STATEOFRESIDENCE);
    }

    /**
     * Sets <code>value</code> as attribute value for STATE_OF_RESIDENCE using the alias name StateOfResidence.
     * @param value value to set the STATE_OF_RESIDENCE
     */
    public void setStateOfResidence(String value) {
        setAttributeInternal(STATEOFRESIDENCE, value);
    }

    /**
     * Gets the attribute value for HOSPITAL using the alias name Hospital.
     * @return the HOSPITAL
     */
    public String getHospital() {
        return (String) getAttributeInternal(HOSPITAL);
    }

    /**
     * Sets <code>value</code> as attribute value for HOSPITAL using the alias name Hospital.
     * @param value value to set the HOSPITAL
     */
    public void setHospital(String value) {
        setAttributeInternal(HOSPITAL, value);
    }

    /**
     * Gets the attribute value for GENDER using the alias name Gender.
     * @return the GENDER
     */
    public String getGender() {
        oracle.jbo.domain.Number type = null;
        String genderName = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());
            System.out.println("number--------- " + number);
            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                genderName = orgRows[0].getAttribute("SexDesc").toString();
            //                System.out.println("genderName ----- " + genderName);
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                genderName = rw.getAttribute("SexDesc") != null ? rw.getAttribute("SexDesc").toString() : "";
            }
            return genderName;
        } else {
            return (String) getAttributeInternal(GENDER);
        }

    }

    /**
     * Sets <code>value</code> as attribute value for GENDER using the alias name Gender.
     * @param value value to set the GENDER
     */
    public void setGender(String value) {
        setAttributeInternal(GENDER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_Title.
     * @return the Trans_Title
     */
    public String getTrans_Title() {
        oracle.jbo.domain.Number type = null;
        String name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("Title") == null ? "" : orgRows[0].getAttribute("Title").toString();
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = rw.getAttribute("Title") != null ? rw.getAttribute("Title").toString() : "";
            }
            return name;
        } else {
            return (String) getAttributeInternal(TRANS_TITLE);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_Title.
     * @param value value to set the  Trans_Title
     */
    public void setTrans_Title(String value) {
        setAttributeInternal(TRANS_TITLE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_FirstName.
     * @return the Trans_FirstName
     */
    public String getTrans_FirstName() {
        oracle.jbo.domain.Number type = null;
        String name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("FirstName").toString();
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = rw.getAttribute("FirstName") != null ? rw.getAttribute("FirstName").toString() : "";
            }
            return name;
        } else {
            return (String) getAttributeInternal(TRANS_FIRSTNAME);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_FirstName.
     * @param value value to set the  Trans_FirstName
     */
    public void setTrans_FirstName(String value) {
        setAttributeInternal(TRANS_FIRSTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_LastName.
     * @return the Trans_LastName
     */
    public String getTrans_LastName() {
        oracle.jbo.domain.Number type = null;
        String name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("LastName").toString();
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = rw.getAttribute("LastName") != null ? rw.getAttribute("LastName").toString() : "";
            }
            return name;
        } else {
            return (String) getAttributeInternal(TRANS_LASTNAME);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_LastName.
     * @param value value to set the  Trans_LastName
     */
    public void setTrans_LastName(String value) {
        setAttributeInternal(TRANS_LASTNAME, value);
    }


    /**
     * Gets the attribute value for ALTERNATE_EMAIL using the alias name AlternateEmail.
     * @return the ALTERNATE_EMAIL
     */
    public String getAlternateEmail() {
        return (String) getAttributeInternal(ALTERNATEEMAIL);
    }

    /**
     * Sets <code>value</code> as attribute value for ALTERNATE_EMAIL using the alias name AlternateEmail.
     * @param value value to set the ALTERNATE_EMAIL
     */
    public void setAlternateEmail(String value) {
        setAttributeInternal(ALTERNATEEMAIL, value);
    }


    /**
     * Gets the attribute value for the calculated attribute Trans_Entity.
     * @return the Trans_Entity
     */
    public String getTrans_Entity() {
        oracle.jbo.domain.Number type = null;
        String name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            //            Row[] orgRows;
            //            orgRows = getEntity_ROVO().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("Entity1") == null ? "" : orgRows[0].getAttribute("Entity1").toString();
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getEntity_ROVO();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = rw.getAttribute("Entity1") != null ? rw.getAttribute("Entity1").toString() : "";
            }
            return name;
        } else {
            return (String) getAttributeInternal(TRANS_ENTITY);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_Entity.
     * @param value value to set the  Trans_Entity
     */
    public void setTrans_Entity(String value) {
        setAttributeInternal(TRANS_ENTITY, value);
    }

    /**
     * Gets the attribute value for PHOTO_CLOB using the alias name PhotoClob.
     * @return the PHOTO_CLOB
     */
    public ClobDomain getPhotoClob() {
        return (ClobDomain) getAttributeInternal(PHOTOCLOB);
    }

    /**
     * Sets <code>value</code> as attribute value for PHOTO_CLOB using the alias name PhotoClob.
     * @param value value to set the PHOTO_CLOB
     */
    public void setPhotoClob(ClobDomain value) {
        setAttributeInternal(PHOTOCLOB, value);
    }

    /**
     * Gets the attribute value for HMO_COPY_DEP_FLAG using the alias name HmoCopyDepFlag.
     * @return the HMO_COPY_DEP_FLAG
     */
    public String getHmoCopyDepFlag() {
        return (String) getAttributeInternal(HMOCOPYDEPFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for HMO_COPY_DEP_FLAG using the alias name HmoCopyDepFlag.
     * @param value value to set the HMO_COPY_DEP_FLAG
     */
    public void setHmoCopyDepFlag(String value) {
        setAttributeInternal(HMOCOPYDEPFLAG, value);
    }

    /**
     * Gets the attribute value for ADDI_CATEGORY using the alias name AddiCategory.
     * @return the ADDI_CATEGORY
     */
    public String getAddiCategory() {
        return (String) getAttributeInternal(ADDICATEGORY);
    }

    /**
     * Sets <code>value</code> as attribute value for ADDI_CATEGORY using the alias name AddiCategory.
     * @param value value to set the ADDI_CATEGORY
     */
    public void setAddiCategory(String value) {
        setAttributeInternal(ADDICATEGORY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_DateofBirth.
     * @return the Trans_DateofBirth
     */
    public Timestamp getTrans_DateofBirth() {
        oracle.jbo.domain.Number type = null;
        Timestamp name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("DateOfBirth").toString();
            //                System.out.println("date name ---" + name);
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = (Timestamp) (rw.getAttribute("DateOfBirth") != null ? rw.getAttribute("DateOfBirth") : "");
              
            }
            return name;
        } else {
            return (Timestamp) getAttributeInternal(TRANS_DATEOFBIRTH);
        }


    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_DateofBirth.
     * @param value value to set the  Trans_DateofBirth
     */
    public void setTrans_DateofBirth(Timestamp value) {
        setAttributeInternal(TRANS_DATEOFBIRTH, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_EmpCost.
     * @return the Trans_EmpCost
     */
    public BigDecimal getTrans_EmpCost() {
        return (BigDecimal) getAttributeInternal(TRANS_EMPCOST);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_EmpCost.
     * @param value value to set the  Trans_EmpCost
     */
    public void setTrans_EmpCost(BigDecimal value) {
        setAttributeInternal(TRANS_EMPCOST, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_PlanCost.
     * @return the Trans_PlanCost
     */
    public String getTrans_PlanCost() {
        return (String) getAttributeInternal(TRANS_PLANCOST);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_PlanCost.
     * @param value value to set the  Trans_PlanCost
     */
    public void setTrans_PlanCost(String value) {
        setAttributeInternal(TRANS_PLANCOST, value);
    }

    /**
     * Gets the attribute value for SOA_FLOWID using the alias name SoaFlowid.
     * @return the SOA_FLOWID
     */
    public BigDecimal getSoaFlowid() {
        return (BigDecimal) getAttributeInternal(SOAFLOWID);
    }

    /**
     * Sets <code>value</code> as attribute value for SOA_FLOWID using the alias name SoaFlowid.
     * @param value value to set the SOA_FLOWID
     */
    public void setSoaFlowid(BigDecimal value) {
        setAttributeInternal(SOAFLOWID, value);
    }

    /**
     * Gets the attribute value for APPROVAL_STATUS using the alias name ApprovalStatus.
     * @return the APPROVAL_STATUS
     */
    public String getApprovalStatus() {
        return (String) getAttributeInternal(APPROVALSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for APPROVAL_STATUS using the alias name ApprovalStatus.
     * @param value value to set the APPROVAL_STATUS
     */
    public void setApprovalStatus(String value) {
        setAttributeInternal(APPROVALSTATUS, value);
    }

    /**
     * Gets the attribute value for ERROR_MSG using the alias name ErrorMsg.
     * @return the ERROR_MSG
     */
    public ClobDomain getErrorMsg() {
        return (ClobDomain) getAttributeInternal(ERRORMSG);
    }

    /**
     * Sets <code>value</code> as attribute value for ERROR_MSG using the alias name ErrorMsg.
     * @param value value to set the ERROR_MSG
     */
    public void setErrorMsg(ClobDomain value) {
        setAttributeInternal(ERRORMSG, value);
    }

    /**
     * Gets the attribute value for PAYROLL_BATCH_NAME using the alias name PayrollBatchName.
     * @return the PAYROLL_BATCH_NAME
     */
    public String getPayrollBatchName() {
        return (String) getAttributeInternal(PAYROLLBATCHNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for PAYROLL_BATCH_NAME using the alias name PayrollBatchName.
     * @param value value to set the PAYROLL_BATCH_NAME
     */
    public void setPayrollBatchName(String value) {
        setAttributeInternal(PAYROLLBATCHNAME, value);
    }

    /**
     * Gets the attribute value for APPROVER_COMMENTS using the alias name ApproverComments.
     * @return the APPROVER_COMMENTS
     */
    public String getApproverComments() {
        return (String) getAttributeInternal(APPROVERCOMMENTS);
    }

    /**
     * Sets <code>value</code> as attribute value for APPROVER_COMMENTS using the alias name ApproverComments.
     * @param value value to set the APPROVER_COMMENTS
     */
    public void setApproverComments(String value) {
        setAttributeInternal(APPROVERCOMMENTS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_EmpAge.
     * @return the Trans_EmpAge
     */
    public String getTrans_EmpAge() {
        return (String) getAttributeInternal(TRANS_EMPAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_EmpAge.
     * @param value value to set the  Trans_EmpAge
     */
    public void setTrans_EmpAge(String value) {
        setAttributeInternal(TRANS_EMPAGE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_PlanName.
     * @return the Trans_PlanName
     */
    public String getTrans_PlanName() {
        Number type = null;
        String name = null;
        if (getHmoMasterHdrId() != null) {
            type = (Number) getHmoMasterHdrId();

            // BigDecimal number = new BigDecimal(type.toString());

            System.out.println("plan Master id ---" + type);

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name =
            //                    orgRows[0].getAttribute("EmailAddress") == null ? "" :
            //                    orgRows[0].getAttribute("EmailAddress").toString();
            //            }
            //            ViewRowSetImpl vo = (ViewRowSetImpl) getXxhrHmoMasterHdr_ROVO1_();
            //            ViewObject vo1 = vo.getViewObject();
            //            ViewCriteria vc1 = vo1.createViewCriteria();
            //            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            //            vcr.setAttribute("HmoMasterHdrId", type);
            //            vc1.addRow(vcr);
            //            vo1.applyViewCriteria(vc1);
            //            vo1.executeQuery();
            //            System.out.println("Row count ---- " + vo1.getEstimatedRowCount());
            //
            Row[] orgRows;

            orgRows = getXxhrHmoMasterHdr_ROVO1_().getFilteredRows("HmoMasterHdrId", type);

            System.out.println("Lenght ----" + orgRows.length);

            if (orgRows.length > 0) {
                name =
                    orgRows[0].getAttribute("HmoPlanName") != null ? orgRows[0].getAttribute("HmoPlanName").toString() :
                    "";

                System.out.println("plan Master  length id name---" + name);

            }
            //            if(vo1.getEstimatedRowCount() > 0){
            //                Row rw = vo1.first();
            //                name = rw.getAttribute("HmoPlanName")!=null?rw.getAttribute("HmoPlanName").toString():"";
            //
            //                System.out.println("plan Master id name---" + name);
            //            }
            return name;
        } else {
            return (String) getAttributeInternal(TRANS_PLANNAME);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_PlanName.
     * @param value value to set the  Trans_PlanName
     */
    public void setTrans_PlanName(String value) {
        setAttributeInternal(TRANS_PLANNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Trans_Job.
     * @return the Trans_Job
     */
    public String getTrans_Job() {
        oracle.jbo.domain.Number type = null;
        String name = null;
        if (getPersonId() != null) {
            type = getPersonId();

            BigDecimal number = new BigDecimal(type.toString());

            //            Row[] orgRows;
            //            orgRows = getxxperEmployee_V_ROVO1().getFilteredRows("PersonId", number);
            //            if (orgRows.length > 0) {
            //                name = orgRows[0].getAttribute("DateOfBirth").toString();
            //                System.out.println("date name ---" + name);
            //            }
            ViewRowSetImpl vo = (ViewRowSetImpl) getxxperEmployee_V_ROVO1();
            ViewObject vo1 = vo.getViewObject();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcr = vc1.createViewCriteriaRow();
            vcr.setAttribute("PersonId", number);
            vc1.addRow(vcr);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                Row rw = vo1.first();
                name = rw.getAttribute("GscEd") != null ? rw.getAttribute("GscEd").toString() : " ";
            }
            return name;
        } else {
            return (String) getAttributeInternal(TRANS_JOB);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Trans_Job.
     * @param value value to set the  Trans_Job
     */
    public void setTrans_Job(String value) {
        setAttributeInternal(TRANS_JOB, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Switch_AddCat.
     * @return the Switch_AddCat
     */
    public String getSwitch_AddCat() {
        return (String) getAttributeInternal(SWITCH_ADDCAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Switch_AddCat.
     * @param value value to set the  Switch_AddCat
     */
    public void setSwitch_AddCat(String value) {
        setAttributeInternal(SWITCH_ADDCAT, value);
    }

    /**
     * Gets the attribute value for COPY_DEP using the alias name CopyDep.
     * @return the COPY_DEP
     */
    public String getCopyDep() {
        return (String) getAttributeInternal(COPYDEP);
    }

    /**
     * Sets <code>value</code> as attribute value for COPY_DEP using the alias name CopyDep.
     * @param value value to set the COPY_DEP
     */
    public void setCopyDep(String value) {
        setAttributeInternal(COPYDEP, value);
    }

    /**
     * Gets the attribute value for HMO_PLAN using the alias name HmoPlan.
     * @return the HMO_PLAN
     */
    public String getHmoPlan() {
        return (String) getAttributeInternal(HMOPLAN);
    }

    /**
     * Sets <code>value</code> as attribute value for HMO_PLAN using the alias name HmoPlan.
     * @param value value to set the HMO_PLAN
     */
    public void setHmoPlan(String value) {
        setAttributeInternal(HMOPLAN, value);
    }

    /**
     * Gets the attribute value for HMO_EMP_COST using the alias name HmoEmpCost.
     * @return the HMO_EMP_COST
     */
    public BigDecimal getHmoEmpCost() {
        return (BigDecimal) getAttributeInternal(HMOEMPCOST);
    }

    /**
     * Sets <code>value</code> as attribute value for HMO_EMP_COST using the alias name HmoEmpCost.
     * @param value value to set the HMO_EMP_COST
     */
    public void setHmoEmpCost(BigDecimal value) {
        setAttributeInternal(HMOEMPCOST, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link XxhrHmoTrxDtl_EOView.
     */
    public RowIterator getXxhrHmoTrxDtl_EOView() {
        return (RowIterator) getAttributeInternal(XXHRHMOTRXDTL_EOVIEW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> HMO_Type_LOV.
     */
    public RowSet getHMO_Type_LOV() {
        return (RowSet) getAttributeInternal(HMO_TYPE_LOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOV_BupaCategory.
     */
    public RowSet getLOV_BupaCategory() {
        return (RowSet) getAttributeInternal(LOV_BUPACATEGORY);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TRA_Cat_LOV.
     */
    public RowSet getTRA_Cat_LOV() {
        return (RowSet) getAttributeInternal(TRA_CAT_LOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> BUPA_Option_LOV.
     */
    public RowSet getBUPA_Option_LOV() {
        return (RowSet) getAttributeInternal(BUPA_OPTION_LOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TRA_Option_LOV.
     */
    public RowSet getTRA_Option_LOV() {
        return (RowSet) getAttributeInternal(TRA_OPTION_LOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> XxhrHmoMasterHdr_ROVO1_.
     */
    public RowSet getXxhrHmoMasterHdr_ROVO1_() {
        return (RowSet) getAttributeInternal(XXHRHMOMASTERHDR_ROVO1_);
    }

    /**
     * Gets the view accessor <code>RowSet</code> Oando_AM_XxperEmployee_V_ROVO1.
     */
    public RowSet getxxperEmployee_V_ROVO1() {
        return (RowSet) getAttributeInternal(XXPEREMPLOYEE_V_ROVO1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> Gender_LOV.
     */
    public RowSet getGender_LOV() {
        return (RowSet) getAttributeInternal(GENDER_LOV);
    }

    /**
     * Gets the view accessor <code>RowSet</code> State_ROVO.
     */
    public RowSet getState_ROVO() {
        return (RowSet) getAttributeInternal(STATE_ROVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> Hospital_ROVO.
     */
    public RowSet getHospital_ROVO() {
        return (RowSet) getAttributeInternal(HOSPITAL_ROVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> XxhrHmoTrxHdr_ROVO.
     */
    public RowSet getXxhrHmoTrxHdr_ROVO() {
        return (RowSet) getAttributeInternal(XXHRHMOTRXHDR_ROVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> Entity_ROVO.
     */
    public RowSet getEntity_ROVO() {

        return (RowSet) getAttributeInternal(ENTITY_ROVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> XXHR_HMO_OPTIONS_MASTER_HMOTYPe.
     */
    public RowSet getXXHR_HMO_OPTIONS_MASTER_HMOTYPe() {
        return (RowSet) getAttributeInternal(XXHR_HMO_OPTIONS_MASTER_HMOTYPE);
    }

    /**
     * Gets the view accessor <code>RowSet</code> XXHR_HMO_CATEGORY_MASTER.
     */
    public RowSet getXXHR_HMO_CATEGORY_MASTER() {
        return (RowSet) getAttributeInternal(XXHR_HMO_CATEGORY_MASTER);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AdditonalCat_ROVO.
     */
    public RowSet getAdditonalCat_ROVO() {
        return (RowSet) getAttributeInternal(ADDITONALCAT_ROVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AdditionalCategory_ROVO1.
     */
    public RowSet getAdditionalCategory_ROVO1() {
        return (RowSet) getAttributeInternal(ADDITIONALCATEGORY_ROVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MaximumEligibleCost_ROVO.
     */
    public RowSet getMaximumEligibleCost_ROVO() {
        return (RowSet) getAttributeInternal(MAXIMUMELIGIBLECOST_ROVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> FetchDepOption_ROVO.
     */
    public RowSet getFetchDepOption_ROVO() {
        return (RowSet) getAttributeInternal(FETCHDEPOPTION_ROVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> StateOfResidence_ROVO.
     */
    public RowSet getStateOfResidence_ROVO() {
        return (RowSet) getAttributeInternal(STATEOFRESIDENCE_ROVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> FetchHospital_ROVO.
     */
    public RowSet getFetchHospital_ROVO() {
        return (RowSet) getAttributeInternal(FETCHHOSPITAL_ROVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> XXHR_HMO_TypeInter.
     */
    public RowSet getXXHR_HMO_TypeInter() {
        return (RowSet) getAttributeInternal(XXHR_HMO_TYPEINTER);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AdditionalCategory_Africa_WW.
     */
    public RowSet getAdditionalCategory_Africa_WW() {
        return (RowSet) getAttributeInternal(ADDITIONALCATEGORY_AFRICA_WW);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AdditionalCategory_Africa_WWE.
     */
    public RowSet getAdditionalCategory_Africa_WWE() {
        return (RowSet) getAttributeInternal(ADDITIONALCATEGORY_AFRICA_WWE);
    }

    /**
     * Gets the view accessor <code>RowSet</code> HmoPlanName_ROVO.
     */
    public RowSet getHmoPlanName_ROVO() {
        return (RowSet) getAttributeInternal(HMOPLANNAME_ROVO);
    }


}

