package model.am;


import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;

import model.am.common.Oando_AM;

import model.ro.XxhrHmoMasterHdr_ROVOImpl;

import model.svo.DependentClass_SVOImpl;
import model.svo.LookupType_SVOImpl;
import model.svo.LookupValue_SVOImpl;

import model.vo.DutyAllowance_VOImpl;
import model.vo.XxfndAttachment_EOViewImpl;
import model.vo.XxhrHmoTrxDtl_EOViewImpl;
import model.vo.XxhrHmoTrxDtl_EOViewRowImpl;
import model.vo.XxhrHmoTrxHdr_EOViewImpl;
import model.vo.XxhrHmoTrxHdr_EOViewRowImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 22 17:52:17 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------

public class Oando_AMImpl extends ApplicationModuleImpl implements ApplicationModule, Oando_AM {
    /**
     * This is the default constructor (do not remove).
     */
    public Oando_AMImpl() {
    }


    /**
     * Container's getter for Lookup_View_ROVO.
     * @return Lookup_View_ROVO
     */
    public String createUop(BigDecimal hdrId) {
        //  String p_errorMessgae = null;
        String p_errorCode = null;
        try {
            String stmt1 = "begin xxfa_uop_depr_pkg.create_line(:p_uop_depr_hdr_id,:p_return_code,:p_return_msg); end;";
            CallableStatement cst = null;
            cst = this.getDBTransaction().createCallableStatement(stmt1, 0);
            cst.setObject("p_uop_depr_hdr_id", hdrId);
            cst.registerOutParameter("p_return_code", Types.VARCHAR);
            cst.registerOutParameter("p_return_msg", Types.VARCHAR);
            cst.executeUpdate();
            if (cst.getObject("p_return_code") != null) {
                // p_errorMessgae = cst.getObject("p_return_msg").toString();
                p_errorCode = cst.getObject("p_return_code").toString();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return p_errorCode;

    }


    //
    //    public String createUop(BigDecimal uop_depr_hdr_id) throws CommonJBOException,
    //    SQLException{
    //
    //            java.math.BigDecimal p_uop_depr_hdr_id = new java.math.BigDecimal();
    //
    //            try {
    //                p_uop_depr_hdr_id = new java.math.BigDecimal(uop_depr_hdr_id);
    //            } catch (CommonJBOException e) {
    //                throw new CommonJBOException(e.getMessage());
    //            }
    //            String stmt1 = "begin \n" + "xxfa_uop_depr_pkg(:p_uop_depr_hdr_id);\n" + "end;";
    //            CallableStatement cst = null;
    //            try {
    //                cst = this.getDBTransaction().createCallableStatement(stmt1, 0);
    //                cst.setObject("p_uop_depr_hdr_id", p_uop_depr_hdr_id);
    //            cst.registerOutParameter("p_return_code", Types.VARCHAR);
    //            cst.registerOutParameter("p_return_msg", Types.VARCHAR);
    //            cst.executeUpdate();
    //            return cst.getString("p_return_code"+" "+"p_return_msg");
    //            } catch (CommonJBOException e) {
    //
    //
    //            throw new CommonJBOException(e.getMessage());
    //
    //            }
    //            finally {
    //                        if (cst != null) {
    //                            try {
    //                                cst.close();
    //
    //                            } catch (CommonJBOException e) {
    //                                // _log.severe("exception occured in invokereceiptstatus method"+e.getmessage());
    //                                // throw new commonjboexception(e.getmessage());
    //
    //                                return e.toString();
    //                            }
    //                        }
    //                    }
    //        }
    //


    public BigDecimal getPersonId(String userName) {
        System.out.println("UserName::::: " + userName);
        BigDecimal personId = new BigDecimal(0);
        ViewObjectImpl vo = this.getUsers_ROVO();
        ViewCriteria vc = vo.createViewCriteria();
        ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
        vcRow.setAttribute("Username", userName);
        vc.addRow(vcRow);
        vo.applyViewCriteria(vc);
        vo.executeQuery();
        if (vo.getEstimatedRowCount() > 0) {
            personId = (BigDecimal) vo.first().getAttribute("PersonId");
            System.out.println("PersonId:: " + personId);
            ADFContext.getCurrent()
                      .getSessionScope()
                      .put("personId", personId);
        }

        return personId;
    }

    public void filterUser() {
        String userName = ADFContext.getCurrent()
                                    .getSessionScope()
                                    .get("userName")
                                    .toString();
        System.err.println(userName + "--------------User Name");
        ViewObjectImpl vo = getDutyAllowance_VO();
        vo.setNamedWhereClauseParam("b_username", userName);
        vo.executeQuery();
        System.err.println(vo.getEstimatedRowCount() + "-------Row Count");
    }

    public void filterHMODetails() {
        String userName = ADFContext.getCurrent()
                                    .getSessionScope()
                                    .get("userName")
                                    .toString();
        System.err.println(userName + "--------------User Name");
        ViewObjectImpl vo = getXxhrHmoTrxHdr_ROVO1();
        vo.setNamedWhereClauseParam("b_username", userName);
        vo.executeQuery();
        System.err.println(vo.getEstimatedRowCount() + "-------Row Count");
    }

    public void createHMOHeaderRow() {
        String empName = null;
        String empNumber = null;
        String businessUnit = null;
        Number businessUnitId = new Number(0);
        String email = null;
        String deptName = null;
        String title =null;
        String firstName=null;
        String lastName=null;

        String userName = ADFContext.getCurrent()
                                    .getSessionScope()
                                    .get("userName")
                                    .toString();

        /**
         * Fetch PersonID from Users Table
         */
        try {
            Number personId = new Number(getPersonId(userName));
            /**
         * Fetch required details from employee table
         */
            ViewObjectImpl vo = this.getXxperEmployee_V_ROVO1();
            ViewCriteria vc = vo.createViewCriteria();
            ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
            vcRow.setAttribute("PersonId", personId);
            vc.addRow(vcRow);
            vo.applyViewCriteria(vc);
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0) {
                businessUnitId = new Number(vo.first().getAttribute("BusinessUnitId"));
                empName = (String) vo.first().getAttribute("DisplayName");
                empNumber = (String) vo.first().getAttribute("PersonNumber");
                businessUnit = (String) vo.first().getAttribute("BusinessUnitName");
                email = (String) vo.first().getAttribute("EmailAddress");
                deptName = (String) vo.first().getAttribute("DepartmentName");
                title = (String) vo.first().getAttribute("Title");
                firstName = (String) vo.first().getAttribute("FirstName");
                lastName = (String) vo.first().getAttribute("LastName");
//                System.out.println("PersonId:: " + personId + "DisplayName:: " + empName + "EmpNumber:::: " +
//                                   empNumber);
//                System.out.println("BUniut:: " + businessUnit + "Email:: " + email);
            }
            /**
         * Create row in header table, setting above values in its respective fields
         */
            ViewObject hdrVo = this.getXxhrHmoTrxHdr_EOView();
            XxhrHmoTrxHdr_EOViewRowImpl newRow = (XxhrHmoTrxHdr_EOViewRowImpl) hdrVo.createRow();
            newRow.setPersonId(personId);
            newRow.setHmoRequestNo(" ");
            newRow.setBusinessUnitId(businessUnitId);
            newRow.setEmpName_Trans(empName);
            newRow.setEmpNumber_Trans(empNumber);
            newRow.setBusinessUnit_Trans(businessUnit);
            newRow.setEmail_Trans(email);
            newRow.setDeptName_Trans(deptName);
            newRow.setHmoAcceptanceFlag("N");
            newRow.setHmoCopyDepFlag("N");
            newRow.setCreatedBy(empName);
            newRow.setTrans_Title(title);
            newRow.setTrans_FirstName(firstName);
            newRow.setTrans_LastName(lastName);
            //newRow.setCreationDate(new java.sql.Timestamp(System.currentTimeMillis()));
            //newRow.setHmoRequestDate(new java.sql.Timestamp(System.currentTimeMillis()));
            //        newRow.setCreationDate("LastUpdateDate", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
            hdrVo.insertRow(newRow);
        } catch (SQLException e) {
        }
    }

    public void editHmoRequest(Number hmoHdrId) {
        String empName = null;
        String empNumber = null;
        String businessUnit = null;
        Number businessUnitId = new Number(0);
        String email = null;
        String deptName = null;
        String title =null;
        String firstName=null;
        String lastName=null;

        System.out.println("HeaderID inside edit mode method:::: " + hmoHdrId);
        ViewObject vo = this.getXxhrHmoTrxHdr_EOView();
        ViewCriteria vc = vo.createViewCriteria();
        ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
        vcRow.setAttribute("HmoTrxHdrId", hmoHdrId);
        vc.addRow(vcRow);
        vo.applyViewCriteria(vc);
        vo.executeQuery();
        System.out.println("Get Query in edit mode hmoHdrId ---- " + hmoHdrId);
        System.out.println("Get Query in edit mode ---- " + vo.getQuery());
        /**
         * Fetch required details from employee table
         */
        String userName = ADFContext.getCurrent()
                                    .getSessionScope()
                                    .get("userName")
                                    .toString();
        Number personId;
        try {
            personId = new Number(getPersonId(userName));
            ViewObjectImpl vo1 = this.getXxperEmployee_V_ROVO1();
            ViewCriteria vc1 = vo1.createViewCriteria();
            ViewCriteriaRow vcRow1 = vc1.createViewCriteriaRow();
            vcRow1.setAttribute("PersonId", personId);
            vc1.addRow(vcRow1);
            vo1.applyViewCriteria(vc1);
            vo1.executeQuery();
            if (vo1.getEstimatedRowCount() > 0) {
                businessUnitId = new Number(vo1.first().getAttribute("BusinessUnitId"));
                empName = (String) vo1.first().getAttribute("DisplayName");
                empNumber = (String) vo1.first().getAttribute("PersonNumber");
                businessUnit = (String) vo1.first().getAttribute("BusinessUnitName");
                email = (String) vo1.first().getAttribute("EmailAddress");
                deptName = (String) vo1.first().getAttribute("DepartmentName");
                title = (String) vo1.first().getAttribute("Title");
                firstName = (String) vo1.first().getAttribute("FirstName");
                lastName = (String) vo1.first().getAttribute("LastName");

                ViewObject hdrVo = this.getXxhrHmoTrxHdr_EOView();
                Row newRow = hdrVo.first();
              //  System.out.println("Header Id in edit mode ----- " + newRow.getAttribute("HmoTrxHdrId"));
                newRow.setAttribute("PersonId", personId);
                newRow.setAttribute("BusinessUnitId", businessUnitId);
                newRow.setAttribute("EmpName_Trans", empName);
                newRow.setAttribute("EmpNumber_Trans", empNumber);
                newRow.setAttribute("Email_Trans", email);
                newRow.setAttribute("DeptName_Trans", deptName);
                System.out.println("Edit HmoAcceptanceFlag--------- " + vo.getCurrentRow().getAttribute("HmoAcceptanceFlag"));
                System.out.println("Edit HmoCopyDepFlag--------- " + vo.getCurrentRow().getAttribute("HmoCopyDepFlag"));
                System.out.println("Edit HmoAcceptanceFlag 1--------- " + newRow.getAttribute("HmoAcceptanceFlag"));
                System.out.println("Edit HmoCopyDepFlag 1--------- " + newRow.getAttribute("HmoCopyDepFlag"));
                newRow.setAttribute("HmoAcceptanceFlag", newRow.getAttribute("HmoAcceptanceFlag"));
                newRow.setAttribute("HmoCopyDepFlag", newRow.getAttribute("HmoCopyDepFlag"));
                newRow.setAttribute("Trans_Title", title);
                newRow.setAttribute("Trans_FirstName", firstName);
                newRow.setAttribute("Trans_LastName", lastName);
            }
        } catch (SQLException e) {
        }

    }

    public void createHMODetailRow(String classType) {
        System.out.println("Classs:::: " + classType);
        String userName = ADFContext.getCurrent()
                                    .getSessionScope()
                                    .get("userName")
                                    .toString();
        //   String create = ADFContext.getCurrent()
        //                                    .getPageFlowScope()
        //                                    .get("toBeCreated")
        //                                    .toString();


        try {
            Number personId = new Number(getPersonId(userName));
            /**
         * Create row in Detail table, setting above values in its respective fields
         */
            //    if("true".equalsIgnoreCase(create)){
            if ("SELF".equalsIgnoreCase(classType)) {
                System.out.println("Firstssss");
                ViewObject dtlVo = this.getXxhrHmoTrxDtl_EOView();
                XxhrHmoTrxDtl_EOViewRowImpl newRow = (XxhrHmoTrxDtl_EOViewRowImpl) dtlVo.createRow();
                newRow.setDependentClass(classType);
                newRow.setPersonId(personId);
                newRow.setCreatedBy(userName);
              //  newRow.setCreationDate(new java.sql.Timestamp(System.currentTimeMillis()));
                dtlVo.insertRow(newRow);
                ADFContext.getCurrent()
                          .getPageFlowScope()
                          .put("toBeCreated", "false");
            } else {
                System.out.println("SEcccccc");
                ViewObject dtlVo = this.getXxhrHmoTrxDtl_Others_EOView();
                XxhrHmoTrxDtl_EOViewRowImpl newRow = (XxhrHmoTrxDtl_EOViewRowImpl) dtlVo.createRow();
                newRow.setDependentClass(classType);
                newRow.setPersonId(personId);
                newRow.setCreatedBy(userName);
             //   newRow.setCreationDate(new java.sql.Timestamp(System.currentTimeMillis()));
                dtlVo.insertRow(newRow);
                ADFContext.getCurrent()
                          .getPageFlowScope()
                          .put("toBeCreated", "false");
            }
            //  }
        } catch (SQLException e) {
        }
    }

    public ArrayList ageCategory(double p_hmo_trx_hdr_id, String p_hmo_request_date, double p_hmo_master_hdr_id,
                                 String p_hmo_type, long p_person_id, String p_hmo_category, String p_hmo_option,
                                 double p_hmo_plan_total, String p_dependent_type,
                                 String p_dep_dob) {

        System.out.println("--------------Entering method----------");

        //        System.out.println("---------------------"+hmo_master_hdr_id+"---------------------"+person_id+"---------------------"+hmo_plan_total+"---------------------"+hmo_trx_hdr_id);
        //        System.out.println(hmo_request_date+"---------------------"+hmo_type+"---------------------"+"---------------------"+hmo_category+"---------------------"+hmo_option+"---------------------"+dependent_type+"---------------------"+dependent_class+"---------------------"+dep_dob);
        ArrayList list = new ArrayList();
        CallableStatement st = null;

        System.out.println();

        try {
            System.out.println("----------------3----------------");

            DateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            java.util.Date reqday = inputFormat.parse(p_hmo_request_date);
            java.sql.Date reqDate = new java.sql.Date(reqday.getTime());
            System.out.println("Sql Date ---------- " + reqDate);

            java.util.Date depday = inputFormat.parse(p_dep_dob);
            java.sql.Date depDate = new java.sql.Date(depday.getTime());
            System.out.println("Sql Date depDate ---------- " + depDate);
            //Creating sql statement
            st =
                this.getDBTransaction()
                .createCallableStatement("BEGIN ? :=  xxhr_hmo_pkg.age_category(?,?,?,?,?,?,?,?,?,?);END;", 0);


            //Register out parameter for default return value of function
            st.registerOutParameter(1, Types.VARCHAR);

            //Set IN parameter's value
            st.setDouble(2, p_hmo_trx_hdr_id);
            st.setDate(3, reqDate);
            st.setDouble(4, p_hmo_master_hdr_id);
            st.setString(5, p_hmo_type);
            st.setLong(6, p_person_id);
            st.setString(7, p_hmo_category);
            st.setString(8, p_hmo_option);
            st.setDouble(9, p_hmo_plan_total);
            st.setString(10, p_dependent_type);
            //st.setString(11, p_dependent_class);
            st.setDate(11, depDate);


            st.executeUpdate();
            list.add(st.getString(1));
            System.out.println("Output ------------>" + st.getObject(1).toString());

        } catch (SQLException e) {
            throw new JboException(e.getMessage());

        } catch (ParseException e) {
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e.getMessage() + "-------");
                }
            }
        }

        return list;
    }


    /**Method to set file path and name
     * @param name
     * @param path
     */
    public void setFileData(String name, String sourceCode, String contTyp, String type) {
        System.out.println("Entered ...");
        if ("SELF".equalsIgnoreCase(type)) {
            System.out.println("IF STmt");
            ViewObject fileVo = this.getSelfAttachment_EOView();
            Row newRow = fileVo.createRow();
            newRow.setAttribute("AttachmentName", name);
            newRow.setAttribute("SourceDocument", type);
            newRow.setAttribute("AttachmentType", contTyp);
            fileVo.insertRow(newRow);
            System.out.println("Created Successfully");
        } else {
            System.out.println("Else Stmt....");
            ViewObject fileVo = this.getOthersAttachment_EOView();
            Row newRow = fileVo.createRow();
            newRow.setAttribute("AttachmentName", name);
            newRow.setAttribute("SourceDocument", type);
            newRow.setAttribute("AttachmentType", contTyp);
            fileVo.insertRow(newRow);
            System.out.println("Creeg ......");
        }
    }

    /**Method to check for duplicate files
     * @param fileNm
     * @return
     */
    public String checkDuplicateFile_Self(String fileNm) {
        ViewObject fileVo = this.getSelfAttachment_EOView();
        Row duplFile[] = fileVo.getFilteredRows("AttachmentName", fileNm);
        if (duplFile.length > 0) {
            return "N";
        } else {
            return "Y";
        }
    }

    /**Method to check for duplicate dependent type
     * @param fileNm
     * @return
     */
    public String checkDuplicateDept_Self(Number personId) {
        ViewObject deptVo = this.getXxhrHmoTrxDtl_EOView();
        Row duplType[] = deptVo.getFilteredRows("PersonId", personId);
        System.out.println("PersonIDD:: " + personId + "Length::: " + duplType.length);
        if (duplType.length > 1) {
            XxhrHmoTrxDtl_EOViewRowImpl row = (XxhrHmoTrxDtl_EOViewRowImpl) deptVo.getCurrentRow();
            row.getSelfDependent_ROVO().executeQuery();
            return "N";
        } else {
            return "Y";
        }
    }

    /**
     * gets the current existing database connection
     * @return Connection-Object
     */
    public Connection getCurrentConnection() {
        Statement st = null;
        try {
            st = getDBTransaction().createStatement(0);
            return st.getConnection();
        } catch (Exception s) {
            s.printStackTrace();
            return null;
        } finally {
            if (st != null)
                try {
                    st.close();
                } catch (Exception s2) {
                }
        }
    }

    /**Method to check for duplicate files
     * @param fileNm
     * @return
     */
    public String checkDuplicateFile_Others(String fileNm) {
        ViewObject fileVo = this.getOthersAttachment_EOView();
        Row duplFile[] = fileVo.getFilteredRows("AttachmentName", fileNm);
        if (duplFile.length > 0) {
            return "N";
        } else {
            return "Y";
        }
    }

    /**
     * Container's getter for Users_ROVO1.
     * @return Users_ROVO1
     */
    public ViewObjectImpl getUsers_ROVO() {
        return (ViewObjectImpl) findViewObject("Users_ROVO");
    }

    /**
     * Container's getter for Employee_View_ROVO1.
     * @return Employee_View_ROVO1
     */
    public ViewObjectImpl getEmployee_View_ROVO() {
        return (ViewObjectImpl) findViewObject("Employee_View_ROVO");
    }


    /**
     * Container's getter for XxhrHmoTrxHdr_ROVO1.
     * @return XxhrHmoTrxHdr_ROVO1
     */
    public ViewObjectImpl getXxhrHmoTrxHdr_ROVO1() {
        return (ViewObjectImpl) findViewObject("XxhrHmoTrxHdr_ROVO1");
    }


    /**
     * Container's getter for LookupValue_SVO1.
     * @return LookupValue_SVO1
     */
    public LookupValue_SVOImpl getLookupValue_SVO1() {
        return (LookupValue_SVOImpl) findViewObject("LookupValue_SVO1");
    }

    /**
     * Container's getter for XxfndLookupValues_V_ROVO1.
     * @return XxfndLookupValues_V_ROVO1
     */
    public ViewObjectImpl getBUPA_Option_LOV() {
        return (ViewObjectImpl) findViewObject("BUPA_Option_LOV");
    }

    /**
     * Container's getter for XxperEmployee_V_ROVO1.
     * @return XxperEmployee_V_ROVO1
     */
    public ViewObjectImpl getXxperEmployee_V_ROVO1() {
        return (ViewObjectImpl) findViewObject("XxperEmployee_V_ROVO1");
    }

    /**
     * Container's getter for XxperEmpDependent_V_ROVO1.
     * @return XxperEmpDependent_V_ROVO1
     */
    public ViewObjectImpl getSelfDependent_ROVO() {
        return (ViewObjectImpl) findViewObject("SelfDependent_ROVO");
    }

    /**
     * Container's getter for DutyAllowance_VO1.
     * @return DutyAllowance_VO1
     */
    public DutyAllowance_VOImpl getDutyAllowance_VO() {
        return (DutyAllowance_VOImpl) findViewObject("DutyAllowance_VO");
    }

    /**
     * Container's getter for DutyAllow_ROVO1.
     * @return DutyAllow_ROVO1
     */
    public ViewObjectImpl getDutyAllow_ROVO1() {
        return (ViewObjectImpl) findViewObject("DutyAllow_ROVO1");
    }

    /**
     * Container's getter for ExtraDutyAllowanceROVO1.
     * @return ExtraDutyAllowanceROVO1
     */
    public ViewObjectImpl getExtraDutyAllowanceROVO1() {
        return (ViewObjectImpl) findViewObject("ExtraDutyAllowanceROVO1");
    }

    /**
     * Container's getter for XxhrHmoTrxHdr_EOView2.
     * @return XxhrHmoTrxHdr_EOView2
     */
    public XxhrHmoTrxHdr_EOViewImpl getXxhrHmoTrxHdr_EOView() {
        return (XxhrHmoTrxHdr_EOViewImpl) findViewObject("XxhrHmoTrxHdr_EOView");
    }

    /**
     * Container's getter for XxhrHmoTrxDtl_EOView2.
     * @return XxhrHmoTrxDtl_EOView2
     */
    public XxhrHmoTrxDtl_EOViewImpl getXxhrHmoTrxDtl_EOView() {
        return (XxhrHmoTrxDtl_EOViewImpl) findViewObject("XxhrHmoTrxDtl_EOView");
    }

    /**
     * Container's getter for XxhrHmoHdr_Dtl_VL.
     * @return XxhrHmoHdr_Dtl_VL
     */
    public ViewLinkImpl getXxhrHmoHdr_Dtl_VL() {
        return (ViewLinkImpl) findViewLink("XxhrHmoHdr_Dtl_VL");
    }

    /**
     * Container's getter for LookupType_SVO1.
     * @return LookupType_SVO1
     */
    public LookupType_SVOImpl getLookupType_SVO1() {
        return (LookupType_SVOImpl) findViewObject("LookupType_SVO1");
    }

    /**
     * Container's getter for DependentClass_SVO1.
     * @return DependentClass_SVO1
     */
    public DependentClass_SVOImpl getDependentClass_SVO1() {
        return (DependentClass_SVOImpl) findViewObject("DependentClass_SVO1");
    }

    /**
     * Container's getter for XxhrHmoTrxDtl_EOView1.
     * @return XxhrHmoTrxDtl_EOView1
     */
    public XxhrHmoTrxDtl_EOViewImpl getXxhrHmoTrxDtl_Others_EOView() {
        return (XxhrHmoTrxDtl_EOViewImpl) findViewObject("XxhrHmoTrxDtl_Others_EOView");
    }

    /**
     * Container's getter for XxhrHmoHdr_Dtl_VL1.
     * @return XxhrHmoHdr_Dtl_VL1
     */
    public ViewLinkImpl getXxhrHmoHdr_Dtl_VL1() {
        return (ViewLinkImpl) findViewLink("XxhrHmoHdr_Dtl_VL1");
    }


    /**
     * Container's getter for XxfndLookupValues_V_ROVO2.
     * @return XxfndLookupValues_V_ROVO2
     */
    public ViewObjectImpl getBUPA_Cat_LOV() {
        return (ViewObjectImpl) findViewObject("BUPA_Cat_LOV");
    }

    /**
     * Container's getter for XxfndLookupValues_V_ROVO3.
     * @return XxfndLookupValues_V_ROVO3
     */
    public ViewObjectImpl getTRA_Option_LOV() {
        return (ViewObjectImpl) findViewObject("TRA_Option_LOV");
    }

    /**
     * Container's getter for XxfndLookupValues_V_ROVO1.
     * @return XxfndLookupValues_V_ROVO1
     */
    public ViewObjectImpl getTRA_Cat_LOV() {
        return (ViewObjectImpl) findViewObject("TRA_Cat_LOV");
    }


    /**
     * Container's getter for XxfndAttachment_EOView4.
     * @return XxfndAttachment_EOView4
     */
    public XxfndAttachment_EOViewImpl getSelfAttachment_EOView() {
        return (XxfndAttachment_EOViewImpl) findViewObject("SelfAttachment_EOView");
    }

    /**
     * Container's getter for XxhrDtl_Attach_VL2.
     * @return XxhrDtl_Attach_VL2
     */
    public ViewLinkImpl getXxhrDtl_Attach_VL2() {
        return (ViewLinkImpl) findViewLink("XxhrDtl_Attach_VL2");
    }

    /**
     * Container's getter for XxfndAttachment_EOView1.
     * @return XxfndAttachment_EOView1
     */
    public XxfndAttachment_EOViewImpl getOthersAttachment_EOView() {
        return (XxfndAttachment_EOViewImpl) findViewObject("OthersAttachment_EOView");
    }

    /**
     * Container's getter for XxhrDtl_Attach_VL1.
     * @return XxhrDtl_Attach_VL1
     */
    public ViewLinkImpl getXxhrDtl_Attach_VL1() {
        return (ViewLinkImpl) findViewLink("XxhrDtl_Attach_VL1");
    }

    /**
     * Container's getter for XxfndAttachment_EOView1.
     * @return XxfndAttachment_EOView1
     */
    public XxfndAttachment_EOViewImpl getXxfndAttachment_EOView1() {
        return (XxfndAttachment_EOViewImpl) findViewObject("XxfndAttachment_EOView1");
    }

    /**
     * Container's getter for XxhrHmoMasterHdr_ROVO1.
     * @return XxhrHmoMasterHdr_ROVO1
     */
    public XxhrHmoMasterHdr_ROVOImpl getXxhrHmoMasterHdr_ROVO1() {
        return (XxhrHmoMasterHdr_ROVOImpl) findViewObject("XxhrHmoMasterHdr_ROVO1");
    }

    /**
     * Container's getter for XxfndLookupValues_V_ROVO1.
     * @return XxfndLookupValues_V_ROVO1
     */
    public ViewObjectImpl getTitle_LOV() {
        return (ViewObjectImpl) findViewObject("Title_LOV");
    }

    /**
     * Container's getter for XxfndLookupValues_V_ROVO2.
     * @return XxfndLookupValues_V_ROVO2
     */
    public ViewObjectImpl getGender_LOV() {
        return (ViewObjectImpl) findViewObject("Gender_LOV");
    }

    /**
     * Container's getter for XxfndLookupValues_V_ROVO1.
     * @return XxfndLookupValues_V_ROVO1
     */
    public ViewObjectImpl getOtherDependents_LOV() {
        return (ViewObjectImpl) findViewObject("OtherDependents_LOV");
    }

    /**
     * Container's getter for XxfndLookupValues_V_ROVO2.
     * @return XxfndLookupValues_V_ROVO2
     */
    public ViewObjectImpl getMaritalStatus_LOV() {
        return (ViewObjectImpl) findViewObject("MaritalStatus_LOV");
    }


    /**
     * Container's getter for XxfndLookupValues_V_ROVO1.
     * @return XxfndLookupValues_V_ROVO1
     */
    public ViewObjectImpl getXxfndLookupValues_V_ROVO() {
        return (ViewObjectImpl) findViewObject("XxfndLookupValues_V_ROVO");
    }
    
    public ArrayList hmoCost(double p_hmo_trx_hdr_id, String p_hmo_request_date, double p_hmo_master_hdr_id,
                             String p_hmo_type, long p_person_id, String p_hmo_category, String p_hmo_option,
                             double p_hmo_plan_total, String p_dependent_type, 
                             String p_dep_dob) {

        System.out.println("--------------Entering method----------");

        //        System.out.println("------ hmo_master_hdr_id-------"+hmo_master_hdr_id+
        //                           "------ person_id------"+person_id+"------hmo_plan_total--------"+hmo_plan_total
        //                           +"-----hmo_trx_hdr_id-------"+hmo_trx_hdr_id);
        //        System.out.println("----- hmo_request_date ---- " +hmo_request_date+
        //                           "------hmo_type-----"+hmo_type+" -----hmo_category---"+hmo_category
        //                           +"-----hmo_option-------"+hmo_option
        //                           +"---- dependent_type-----"+dependent_type+"-----dependent_class--------"+dependent_class
        //                           +"-----dep_dob-----"+dep_dob);
        ArrayList list = new ArrayList();
        CallableStatement st = null;

        System.out.println();

        try {
            System.out.println("----------------3----------------");

            DateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            java.util.Date reqday = inputFormat.parse(p_hmo_request_date);
            java.sql.Date reqDate = new java.sql.Date(reqday.getTime());
            System.out.println("Sql Date ---------- " + reqDate);

            java.util.Date depday = inputFormat.parse(p_dep_dob);
            java.sql.Date depDate = new java.sql.Date(depday.getTime());
            System.out.println("Sql Date depDate ---------- " + depDate);
            //Creating sql statement
            st =
                this.getDBTransaction()
                .createCallableStatement("BEGIN ? :=  xxhr_hmo_pkg.hmo_cost(?,?,?,?,?,?,?,?,?,?);END;", 0);


            //Register out parameter for default return value of function
            st.registerOutParameter(1, Types.DOUBLE);

            //Set IN parameter's value
            st.setDouble(2, p_hmo_trx_hdr_id);
            st.setDate(3, reqDate);
            st.setDouble(4, p_hmo_master_hdr_id);
            st.setString(5, p_hmo_type);
            st.setLong(6, p_person_id);
            st.setString(7, p_hmo_category);
            st.setString(8, p_hmo_option);
            st.setDouble(9, p_hmo_plan_total);
            st.setString(10, p_dependent_type);
            //st.setString(11, p_dependent_class);
            st.setDate(11, depDate);


            st.executeUpdate();
            list.add(st.getDouble(1));
            System.out.println("Output ------------>" + st.getObject(1).toString());

        } catch (SQLException e) {
            throw new JboException(e.getMessage());

        } catch (ParseException e) {
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e.getMessage() + "-------");
                }
            }
        }

        return list;
    }
    

    public ArrayList dependent_details(BigDecimal hdr_id, BigDecimal person_id) {
        //        String p_errorMessgae = null;
        //                String p_errorCode =null;
        System.err.println("came in try dependent_details");
        ArrayList list = new ArrayList();
        try {
           
            String stmt1 =
                "begin xxhr_hmo_pkg.copy_dependent_details(:p_new_trx_hdr_id,:p_person_id,:p_return_code,:p_return_msg); end;";
            CallableStatement cst = null;
            cst = this.getDBTransaction().createCallableStatement(stmt1, 0);
            cst.setObject("p_new_trx_hdr_id", hdr_id);
            cst.setObject("p_person_id", person_id);
//            cst.setObject("p_well_id", well_id);
//            cst.setObject("p_period", period);
            cst.registerOutParameter("p_return_code", Types.VARCHAR);
            cst.registerOutParameter("p_return_msg", Types.VARCHAR);
            cst.executeUpdate();
            if (cst.getObject("p_return_code") != null) {
                System.err.println("p_return_code");
                list.add(cst.getObject("p_return_code").toString());
            } else {
                list.add(" ");
            }
            if (cst.getObject("p_return_msg") != null) {
                System.err.println("p_return_msg");
                list.add(cst.getObject("p_return_msg").toString());
            } else {
                list.add(" ");
            }

        } catch (SQLException e) {
            System.err.println("came in try dependent_details catch");
            e.printStackTrace();
        }
        return list;

    }

}
