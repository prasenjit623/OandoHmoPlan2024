package model.eo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 22 11:11:43 IST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxhrHmoDtl_EOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        HmoDtlId,
        HmoHdrId,
        DependentType,
        DependentClass,
        DepDob,
        DepGender,
        DepTitle,
        DepAgeCategory,
        DepFirstName,
        DepLastName,
        ResiAddress,
        PersonId,
        MobileNo,
        MaritalStatus,
        ResidentialAddress,
        StateOfResidence,
        Hospital,
        DependentCost,
        CreatedBy,
        CreationDate,
        LastUpdatedBy,
        LastUpdateDate,
        LastUpdateLogin,
        DepPhoto,
        DepPhotoClob,
        ExistingData,
        HmoDtlOldId,
        ReasonForChange,
        XxhrHmoHdr_EO,
        XxfndAttachment_EO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int HMODTLID = AttributesEnum.HmoDtlId.index();
    public static final int HMOHDRID = AttributesEnum.HmoHdrId.index();
    public static final int DEPENDENTTYPE = AttributesEnum.DependentType.index();
    public static final int DEPENDENTCLASS = AttributesEnum.DependentClass.index();
    public static final int DEPDOB = AttributesEnum.DepDob.index();
    public static final int DEPGENDER = AttributesEnum.DepGender.index();
    public static final int DEPTITLE = AttributesEnum.DepTitle.index();
    public static final int DEPAGECATEGORY = AttributesEnum.DepAgeCategory.index();
    public static final int DEPFIRSTNAME = AttributesEnum.DepFirstName.index();
    public static final int DEPLASTNAME = AttributesEnum.DepLastName.index();
    public static final int RESIADDRESS = AttributesEnum.ResiAddress.index();
    public static final int PERSONID = AttributesEnum.PersonId.index();
    public static final int MOBILENO = AttributesEnum.MobileNo.index();
    public static final int MARITALSTATUS = AttributesEnum.MaritalStatus.index();
    public static final int RESIDENTIALADDRESS = AttributesEnum.ResidentialAddress.index();
    public static final int STATEOFRESIDENCE = AttributesEnum.StateOfResidence.index();
    public static final int HOSPITAL = AttributesEnum.Hospital.index();
    public static final int DEPENDENTCOST = AttributesEnum.DependentCost.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int LASTUPDATELOGIN = AttributesEnum.LastUpdateLogin.index();
    public static final int DEPPHOTO = AttributesEnum.DepPhoto.index();
    public static final int DEPPHOTOCLOB = AttributesEnum.DepPhotoClob.index();
    public static final int EXISTINGDATA = AttributesEnum.ExistingData.index();
    public static final int HMODTLOLDID = AttributesEnum.HmoDtlOldId.index();
    public static final int REASONFORCHANGE = AttributesEnum.ReasonForChange.index();
    public static final int XXHRHMOHDR_EO = AttributesEnum.XxhrHmoHdr_EO.index();
    public static final int XXFNDATTACHMENT_EO = AttributesEnum.XxfndAttachment_EO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxhrHmoDtl_EOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.eo.XxhrHmoDtl_EO");
    }


    /**
     * Gets the attribute value for HmoDtlId, using the alias name HmoDtlId.
     * @return the value of HmoDtlId
     */
    public BigDecimal getHmoDtlId() {
        return (BigDecimal) getAttributeInternal(HMODTLID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HmoDtlId.
     * @param value value to set the HmoDtlId
     */
    public void setHmoDtlId(BigDecimal value) {
        setAttributeInternal(HMODTLID, value);
    }

    /**
     * Gets the attribute value for HmoHdrId, using the alias name HmoHdrId.
     * @return the value of HmoHdrId
     */
    public BigDecimal getHmoHdrId() {
        return (BigDecimal) getAttributeInternal(HMOHDRID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HmoHdrId.
     * @param value value to set the HmoHdrId
     */
    public void setHmoHdrId(BigDecimal value) {
        setAttributeInternal(HMOHDRID, value);
    }

    /**
     * Gets the attribute value for DependentType, using the alias name DependentType.
     * @return the value of DependentType
     */
    public String getDependentType() {
        return (String) getAttributeInternal(DEPENDENTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DependentType.
     * @param value value to set the DependentType
     */
    public void setDependentType(String value) {
        setAttributeInternal(DEPENDENTTYPE, value);
    }

    /**
     * Gets the attribute value for DependentClass, using the alias name DependentClass.
     * @return the value of DependentClass
     */
    public String getDependentClass() {
        return (String) getAttributeInternal(DEPENDENTCLASS);
    }

    /**
     * Sets <code>value</code> as the attribute value for DependentClass.
     * @param value value to set the DependentClass
     */
    public void setDependentClass(String value) {
        setAttributeInternal(DEPENDENTCLASS, value);
    }

    /**
     * Gets the attribute value for DepDob, using the alias name DepDob.
     * @return the value of DepDob
     */
    public Timestamp getDepDob() {
        return (Timestamp) getAttributeInternal(DEPDOB);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepDob.
     * @param value value to set the DepDob
     */
    public void setDepDob(Timestamp value) {
        setAttributeInternal(DEPDOB, value);
    }

    /**
     * Gets the attribute value for DepGender, using the alias name DepGender.
     * @return the value of DepGender
     */
    public String getDepGender() {
        return (String) getAttributeInternal(DEPGENDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepGender.
     * @param value value to set the DepGender
     */
    public void setDepGender(String value) {
        setAttributeInternal(DEPGENDER, value);
    }

    /**
     * Gets the attribute value for DepTitle, using the alias name DepTitle.
     * @return the value of DepTitle
     */
    public String getDepTitle() {
        return (String) getAttributeInternal(DEPTITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepTitle.
     * @param value value to set the DepTitle
     */
    public void setDepTitle(String value) {
        setAttributeInternal(DEPTITLE, value);
    }

    /**
     * Gets the attribute value for DepAgeCategory, using the alias name DepAgeCategory.
     * @return the value of DepAgeCategory
     */
    public String getDepAgeCategory() {
        return (String) getAttributeInternal(DEPAGECATEGORY);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepAgeCategory.
     * @param value value to set the DepAgeCategory
     */
    public void setDepAgeCategory(String value) {
        setAttributeInternal(DEPAGECATEGORY, value);
    }

    /**
     * Gets the attribute value for DepFirstName, using the alias name DepFirstName.
     * @return the value of DepFirstName
     */
    public String getDepFirstName() {
        return (String) getAttributeInternal(DEPFIRSTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepFirstName.
     * @param value value to set the DepFirstName
     */
    public void setDepFirstName(String value) {
        setAttributeInternal(DEPFIRSTNAME, value);
    }

    /**
     * Gets the attribute value for DepLastName, using the alias name DepLastName.
     * @return the value of DepLastName
     */
    public String getDepLastName() {
        return (String) getAttributeInternal(DEPLASTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepLastName.
     * @param value value to set the DepLastName
     */
    public void setDepLastName(String value) {
        setAttributeInternal(DEPLASTNAME, value);
    }

    /**
     * Gets the attribute value for ResiAddress, using the alias name ResiAddress.
     * @return the value of ResiAddress
     */
    public String getResiAddress() {
        return (String) getAttributeInternal(RESIADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ResiAddress.
     * @param value value to set the ResiAddress
     */
    public void setResiAddress(String value) {
        setAttributeInternal(RESIADDRESS, value);
    }

    /**
     * Gets the attribute value for PersonId, using the alias name PersonId.
     * @return the value of PersonId
     */
    public BigDecimal getPersonId() {
        return (BigDecimal) getAttributeInternal(PERSONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PersonId.
     * @param value value to set the PersonId
     */
    public void setPersonId(BigDecimal value) {
        setAttributeInternal(PERSONID, value);
    }

    /**
     * Gets the attribute value for MobileNo, using the alias name MobileNo.
     * @return the value of MobileNo
     */
    public String getMobileNo() {
        return (String) getAttributeInternal(MOBILENO);
    }

    /**
     * Sets <code>value</code> as the attribute value for MobileNo.
     * @param value value to set the MobileNo
     */
    public void setMobileNo(String value) {
        setAttributeInternal(MOBILENO, value);
    }

    /**
     * Gets the attribute value for MaritalStatus, using the alias name MaritalStatus.
     * @return the value of MaritalStatus
     */
    public String getMaritalStatus() {
        return (String) getAttributeInternal(MARITALSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for MaritalStatus.
     * @param value value to set the MaritalStatus
     */
    public void setMaritalStatus(String value) {
        setAttributeInternal(MARITALSTATUS, value);
    }

    /**
     * Gets the attribute value for ResidentialAddress, using the alias name ResidentialAddress.
     * @return the value of ResidentialAddress
     */
    public String getResidentialAddress() {
        return (String) getAttributeInternal(RESIDENTIALADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ResidentialAddress.
     * @param value value to set the ResidentialAddress
     */
    public void setResidentialAddress(String value) {
        setAttributeInternal(RESIDENTIALADDRESS, value);
    }

    /**
     * Gets the attribute value for StateOfResidence, using the alias name StateOfResidence.
     * @return the value of StateOfResidence
     */
    public String getStateOfResidence() {
        return (String) getAttributeInternal(STATEOFRESIDENCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StateOfResidence.
     * @param value value to set the StateOfResidence
     */
    public void setStateOfResidence(String value) {
        setAttributeInternal(STATEOFRESIDENCE, value);
    }

    /**
     * Gets the attribute value for Hospital, using the alias name Hospital.
     * @return the value of Hospital
     */
    public String getHospital() {
        return (String) getAttributeInternal(HOSPITAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Hospital.
     * @param value value to set the Hospital
     */
    public void setHospital(String value) {
        setAttributeInternal(HOSPITAL, value);
    }

    /**
     * Gets the attribute value for DependentCost, using the alias name DependentCost.
     * @return the value of DependentCost
     */
    public BigDecimal getDependentCost() {
        return (BigDecimal) getAttributeInternal(DEPENDENTCOST);
    }

    /**
     * Sets <code>value</code> as the attribute value for DependentCost.
     * @param value value to set the DependentCost
     */
    public void setDependentCost(BigDecimal value) {
        setAttributeInternal(DEPENDENTCOST, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationDate.
     * @param value value to set the CreationDate
     */
    public void setCreationDate(Timestamp value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Timestamp getLastUpdateDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdateDate.
     * @param value value to set the LastUpdateDate
     */
    public void setLastUpdateDate(Timestamp value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdateLogin, using the alias name LastUpdateLogin.
     * @return the value of LastUpdateLogin
     */
    public String getLastUpdateLogin() {
        return (String) getAttributeInternal(LASTUPDATELOGIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdateLogin.
     * @param value value to set the LastUpdateLogin
     */
    public void setLastUpdateLogin(String value) {
        setAttributeInternal(LASTUPDATELOGIN, value);
    }

    /**
     * Gets the attribute value for DepPhoto, using the alias name DepPhoto.
     * @return the value of DepPhoto
     */
    public BlobDomain getDepPhoto() {
        return (BlobDomain) getAttributeInternal(DEPPHOTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepPhoto.
     * @param value value to set the DepPhoto
     */
    public void setDepPhoto(BlobDomain value) {
        setAttributeInternal(DEPPHOTO, value);
    }

    /**
     * Gets the attribute value for DepPhotoClob, using the alias name DepPhotoClob.
     * @return the value of DepPhotoClob
     */
    public ClobDomain getDepPhotoClob() {
        return (ClobDomain) getAttributeInternal(DEPPHOTOCLOB);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepPhotoClob.
     * @param value value to set the DepPhotoClob
     */
    public void setDepPhotoClob(ClobDomain value) {
        setAttributeInternal(DEPPHOTOCLOB, value);
    }

    /**
     * Gets the attribute value for ExistingData, using the alias name ExistingData.
     * @return the value of ExistingData
     */
    public String getExistingData() {
        return (String) getAttributeInternal(EXISTINGDATA);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExistingData.
     * @param value value to set the ExistingData
     */
    public void setExistingData(String value) {
        setAttributeInternal(EXISTINGDATA, value);
    }

    /**
     * Gets the attribute value for HmoDtlOldId, using the alias name HmoDtlOldId.
     * @return the value of HmoDtlOldId
     */
    public BigDecimal getHmoDtlOldId() {
        return (BigDecimal) getAttributeInternal(HMODTLOLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HmoDtlOldId.
     * @param value value to set the HmoDtlOldId
     */
    public void setHmoDtlOldId(BigDecimal value) {
        setAttributeInternal(HMODTLOLDID, value);
    }

    /**
     * Gets the attribute value for ReasonForChange, using the alias name ReasonForChange.
     * @return the value of ReasonForChange
     */
    public String getReasonForChange() {
        return (String) getAttributeInternal(REASONFORCHANGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReasonForChange.
     * @param value value to set the ReasonForChange
     */
    public void setReasonForChange(String value) {
        setAttributeInternal(REASONFORCHANGE, value);
    }

    /**
     * @return the associated entity XxhrHmoHdr_EOImpl.
     */
    public XxhrHmoHdr_EOImpl getXxhrHmoHdr_EO() {
        return (XxhrHmoHdr_EOImpl) getAttributeInternal(XXHRHMOHDR_EO);
    }

    /**
     * Sets <code>value</code> as the associated entity XxhrHmoHdr_EOImpl.
     */
    public void setXxhrHmoHdr_EO(XxhrHmoHdr_EOImpl value) {
        setAttributeInternal(XXHRHMOHDR_EO, value);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getXxfndAttachment_EO() {
        return (RowIterator) getAttributeInternal(XXFNDATTACHMENT_EO);
    }


    /**
     * @param hmoDtlId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal hmoDtlId) {
        return new Key(new Object[] { hmoDtlId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        SequenceImpl seq = new SequenceImpl("XXHR_HMO_HDR_S", this.getDBTransaction());
        BigDecimal newDepId = seq.getSequenceNumber().bigDecimalValue();
        this.setHmoDtlId(newDepId);
        this.setHmoDtlOldId(newDepId);
        this.setCreatedBy(ADFContext.getCurrent().getSessionScope().get("userName").toString());
        this.setLastUpdatedBy(ADFContext.getCurrent().getSessionScope().get("userName").toString());
        this.setLastUpdateLogin(ADFContext.getCurrent().getSessionScope().get("userName").toString());
        this.setCreationDate(new Timestamp(System.currentTimeMillis()));
        this.setLastUpdateDate(new Timestamp(System.currentTimeMillis()));
        this.setExistingData("N");
        this.setDependentClass("NEW_DEPENDENT");
        
        super.create(attributeList);
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == EntityImpl.DML_UPDATE) {
           this.setLastUpdatedBy(ADFContext.getCurrent().getSessionScope().get("userName").toString());
           this.setLastUpdateLogin(ADFContext.getCurrent().getSessionScope().get("userName").toString());
           this.setLastUpdateDate(new Timestamp(System.currentTimeMillis()));
        }
        super.doDML(operation, e);
    }
}

